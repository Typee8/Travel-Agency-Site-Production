/*! For license information please see client.min.js.LICENSE.txt */
(()=>{"use strict";var e={609:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),r=n.n(i),s=n(314),o=n.n(s)()(r());o.push([e.id,".basket__header--medium {\n  font-weight: var(--font-weight-medium);\n}\n\n.total-price__value {\n  font-weight: var(--font-weight-semi-bold);\n}\n\n.basket__header {\n  font-size: 1.2rem;\n}\n\n.basket__header--main {\n  font-size: 1.6rem;\n}\n\n.basket__header--medium {\n  font-size: 1.3rem;\n}\n\n.item__total-price {\n  font-size: 1.3rem;\n}\n\n.basket__header--mobile,\n.item__prices {\n  font-size: 1rem;\n}\n\n.order__field-input {\n  font-size: 1.2rem;\n}\n\n@media (min-width: 650px) {\n  .basket__header {\n    font-size: 1.3rem;\n  }\n\n  .basket__header--main {\n    font-size: 2rem;\n  }\n\n  .basket__header--medium {\n    font-size: 1.5rem;\n  }\n\n  .item__total-price {\n    font-size: 1.5rem;\n  }\n\n  .item__prices {\n    font-size: 1.2rem;\n  }\n\n  .order__field-input {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 950px) {\n\n  .basket__header {\n    font-size: 1.3rem;\n  }\n\n  .basket__header--main {\n    font-size: 2.5rem;\n  }\n\n  .basket__header--medium {\n    font-size: 1.5rem;\n  }\n\n  .order__field-input {\n    font-size: 1.3rem;\n  }\n}","",{version:3,sources:["webpack://./src/css/client/basket/basket-fonts.css"],names:[],mappings:"AAAA;EACE,sCAAsC;AACxC;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE;IACE,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF;;AAEA;;EAEE;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF",sourcesContent:[".basket__header--medium {\n  font-weight: var(--font-weight-medium);\n}\n\n.total-price__value {\n  font-weight: var(--font-weight-semi-bold);\n}\n\n.basket__header {\n  font-size: 1.2rem;\n}\n\n.basket__header--main {\n  font-size: 1.6rem;\n}\n\n.basket__header--medium {\n  font-size: 1.3rem;\n}\n\n.item__total-price {\n  font-size: 1.3rem;\n}\n\n.basket__header--mobile,\n.item__prices {\n  font-size: 1rem;\n}\n\n.order__field-input {\n  font-size: 1.2rem;\n}\n\n@media (min-width: 650px) {\n  .basket__header {\n    font-size: 1.3rem;\n  }\n\n  .basket__header--main {\n    font-size: 2rem;\n  }\n\n  .basket__header--medium {\n    font-size: 1.5rem;\n  }\n\n  .item__total-price {\n    font-size: 1.5rem;\n  }\n\n  .item__prices {\n    font-size: 1.2rem;\n  }\n\n  .order__field-input {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 950px) {\n\n  .basket__header {\n    font-size: 1.3rem;\n  }\n\n  .basket__header--main {\n    font-size: 2.5rem;\n  }\n\n  .basket__header--medium {\n    font-size: 1.5rem;\n  }\n\n  .order__field-input {\n    font-size: 1.3rem;\n  }\n}"],sourceRoot:""}]);const a=o},420:(e,t,n)=>{n.d(t,{A:()=>u});var i=n(354),r=n.n(i),s=n(314),o=n.n(s),a=n(417),l=n.n(a),c=new URL(n(637),n.b),h=o()(r()),d=l()(c);h.push([e.id,`.basket {\n  position: fixed;\n  z-index: 998;\n  top: 0;\n  left: 0;\n  display: none;\n  align-items: start;\n  gap: 40px;\n  grid-template-areas: "items"\n    "total-price"\n    "order";\n  padding-top: 169px;\n  padding-inline: 20px;\n  padding-bottom: 40px;\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--primary-color-bright);\n  overflow-y: auto;\n}\n\n.basket--open {\n  display: grid;\n}\n\n.basket__items,\n.total-price,\n.basket__order {\n  border-radius: 20px;\n  padding: 30px;\n  background-color: var(--primary-color);\n}\n\n.basket__items,\n.item-list__item {\n  display: grid;\n  gap: 20px;\n  grid-template-columns: 1fr 1fr 0.5fr 0.4fr;\n}\n\n.basket__items {\n  grid-area: items;\n  gap: 30px;\n}\n\n.total-price {\n  grid-area: total-price;\n}\n\n.order {\n  grid-area: order;\n}\n\n.basket__header--main {\n  grid-column: 1 / 5;\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.basket__header--padding-left {\n  padding-left: 20px;\n}\n\n.basket__order>.order__field--submit {\n  text-align: center;\n}\n\n.basket__order>*:not(:last-child) {\n  margin-bottom: 10px;\n}\n\n.order__field-error {\n  color: red;\n}\n\n.order__field-input {\n  margin-top: 10px;\n  border: none;\n  color: white;\n  background-color: var(--primary-color-bright);\n}\n\n.order__field-submit {\n  padding: 20px;\n  margin-top: 30px;\n  width: 200px;\n  border: 4px solid white;\n  background-color: var(--secondary-color);\n}\n\n.order__field-name {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.items-list {\n  grid-column: 1 / 5;\n}\n\n.item-list__item {\n  grid-column: 1 / 5;\n  align-items: center;\n  padding: 30px 20px;\n  border: 3px solid var(--primary-color-stripe);\n  border-radius: 20px;\n}\n\n.item__btn-remove {\n  content: url(${d});\n  margin-top: 30px;\n  margin-inline: auto;\n  padding: 10px;\n  border-radius: 100vw;\n  border: 3px solid var(--primary-color-stripe);\n}\n\n.item__prices {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.basket__header--tablet {\n  display: none;\n}\n\n.basket__header--mobile {\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.basket__header--mobile:not(:first-child) {\n  margin-top: 30px;\n}\n\n.item-list__item {\n  grid-template-columns: 1fr;\n}\n\n.basket__header--medium,\n.item__prices,\n.item__total-price {\n  text-align: center;\n}\n\n@media (max-width: 360px) {\n\n  .basket,\n  .basket__items,\n  .total-price,\n  .basket__order {\n    padding-inline: 10px;\n  }\n}\n\n@media (min-width: 650px) {\n\n  .basket {\n    padding-inline: 40px;\n  }\n}\n\n@media (min-width: 950px) {\n\n  .basket__header--medium,\n  .item__prices,\n  .item__total-price {\n    text-align: unset;\n  }\n\n  .item__btn-remove {\n    margin-top: unset;\n  }\n\n  .basket__header--mobile {\n    display: none;\n  }\n\n  .basket__header--tablet {\n    display: initial;\n  }\n\n  .basket {\n    grid-template-areas: "items items"\n      "total-price order";\n    grid-template-rows: 1fr 2fr;\n    padding-inline: 60px;\n  }\n\n  .item-list__item {\n    justify-items: start;\n    grid-template-columns: 1fr 1fr 0.5fr 0.4fr;\n  }\n\n}\n\n@media (min-width: 1200px) {\n  .basket {\n    grid-template-areas:\n      "items total-price"\n      "items order";\n    grid-template-columns: 1fr 0.5fr;\n    grid-template-rows: max-content;\n  }\n}`,"",{version:3,sources:["webpack://./src/css/client/basket/basket.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,YAAY;EACZ,MAAM;EACN,OAAO;EACP,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT;;WAES;EACT,kBAAkB;EAClB,oBAAoB;EACpB,oBAAoB;EACpB,YAAY;EACZ,aAAa;EACb,6CAA6C;EAC7C,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;;;EAGE,mBAAmB;EACnB,aAAa;EACb,sCAAsC;AACxC;;AAEA;;EAEE,aAAa;EACb,SAAS;EACT,0CAA0C;AAC5C;;AAEA;EACE,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,oDAAoD;AACtD;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,YAAY;EACZ,6CAA6C;AAC/C;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,YAAY;EACZ,uBAAuB;EACvB,wCAAwC;AAC1C;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;AACV;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;EAClB,6CAA6C;EAC7C,mBAAmB;AACrB;;AAEA;EACE,gDAA2C;EAC3C,gBAAgB;EAChB,mBAAmB;EACnB,aAAa;EACb,oBAAoB;EACpB,6CAA6C;AAC/C;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,oDAAoD;AACtD;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;;;EAGE,kBAAkB;AACpB;;AAEA;;EAEE;;;;IAIE,oBAAoB;EACtB;AACF;;AAEA;;EAEE;IACE,oBAAoB;EACtB;AACF;;AAEA;;EAEE;;;IAGE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,gBAAgB;EAClB;;EAEA;IACE;yBACqB;IACrB,2BAA2B;IAC3B,oBAAoB;EACtB;;EAEA;IACE,oBAAoB;IACpB,0CAA0C;EAC5C;;AAEF;;AAEA;EACE;IACE;;mBAEe;IACf,gCAAgC;IAChC,+BAA+B;EACjC;AACF",sourcesContent:['.basket {\n  position: fixed;\n  z-index: 998;\n  top: 0;\n  left: 0;\n  display: none;\n  align-items: start;\n  gap: 40px;\n  grid-template-areas: "items"\n    "total-price"\n    "order";\n  padding-top: 169px;\n  padding-inline: 20px;\n  padding-bottom: 40px;\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--primary-color-bright);\n  overflow-y: auto;\n}\n\n.basket--open {\n  display: grid;\n}\n\n.basket__items,\n.total-price,\n.basket__order {\n  border-radius: 20px;\n  padding: 30px;\n  background-color: var(--primary-color);\n}\n\n.basket__items,\n.item-list__item {\n  display: grid;\n  gap: 20px;\n  grid-template-columns: 1fr 1fr 0.5fr 0.4fr;\n}\n\n.basket__items {\n  grid-area: items;\n  gap: 30px;\n}\n\n.total-price {\n  grid-area: total-price;\n}\n\n.order {\n  grid-area: order;\n}\n\n.basket__header--main {\n  grid-column: 1 / 5;\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.basket__header--padding-left {\n  padding-left: 20px;\n}\n\n.basket__order>.order__field--submit {\n  text-align: center;\n}\n\n.basket__order>*:not(:last-child) {\n  margin-bottom: 10px;\n}\n\n.order__field-error {\n  color: red;\n}\n\n.order__field-input {\n  margin-top: 10px;\n  border: none;\n  color: white;\n  background-color: var(--primary-color-bright);\n}\n\n.order__field-submit {\n  padding: 20px;\n  margin-top: 30px;\n  width: 200px;\n  border: 4px solid white;\n  background-color: var(--secondary-color);\n}\n\n.order__field-name {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.items-list {\n  grid-column: 1 / 5;\n}\n\n.item-list__item {\n  grid-column: 1 / 5;\n  align-items: center;\n  padding: 30px 20px;\n  border: 3px solid var(--primary-color-stripe);\n  border-radius: 20px;\n}\n\n.item__btn-remove {\n  content: url(../../../assets/deleteBtn.svg);\n  margin-top: 30px;\n  margin-inline: auto;\n  padding: 10px;\n  border-radius: 100vw;\n  border: 3px solid var(--primary-color-stripe);\n}\n\n.item__prices {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.basket__header--tablet {\n  display: none;\n}\n\n.basket__header--mobile {\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.basket__header--mobile:not(:first-child) {\n  margin-top: 30px;\n}\n\n.item-list__item {\n  grid-template-columns: 1fr;\n}\n\n.basket__header--medium,\n.item__prices,\n.item__total-price {\n  text-align: center;\n}\n\n@media (max-width: 360px) {\n\n  .basket,\n  .basket__items,\n  .total-price,\n  .basket__order {\n    padding-inline: 10px;\n  }\n}\n\n@media (min-width: 650px) {\n\n  .basket {\n    padding-inline: 40px;\n  }\n}\n\n@media (min-width: 950px) {\n\n  .basket__header--medium,\n  .item__prices,\n  .item__total-price {\n    text-align: unset;\n  }\n\n  .item__btn-remove {\n    margin-top: unset;\n  }\n\n  .basket__header--mobile {\n    display: none;\n  }\n\n  .basket__header--tablet {\n    display: initial;\n  }\n\n  .basket {\n    grid-template-areas: "items items"\n      "total-price order";\n    grid-template-rows: 1fr 2fr;\n    padding-inline: 60px;\n  }\n\n  .item-list__item {\n    justify-items: start;\n    grid-template-columns: 1fr 1fr 0.5fr 0.4fr;\n  }\n\n}\n\n@media (min-width: 1200px) {\n  .basket {\n    grid-template-areas:\n      "items total-price"\n      "items order";\n    grid-template-columns: 1fr 0.5fr;\n    grid-template-rows: max-content;\n  }\n}'],sourceRoot:""}]);const u=h},751:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),r=n.n(i),s=n(314),o=n.n(s)()(r());o.push([e.id,"@media (min-width: 1200px) {\n\n  .navbar {\n    justify-content: space-evenly;\n  }\n\n  .navbar__container {\n    display: flex;\n  }\n\n  .navbar__item {\n    padding: 15px 25px;\n  }\n\n  .navbar__item:hover {\n    cursor: pointer;\n    background-color: #011E3F;\n  }\n\n  .wrapper--main::before {\n    content: '';\n    position: absolute;\n    top: 110px;\n    left: 8vw;\n    right: 8vw;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .mainpage {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    justify-items: center;\n    gap: 5vw;\n    padding-inline: 5vw;\n    margin-top: 60px;\n    margin-bottom: 7vh;\n  }\n\n  .mainpage__container {\n    justify-self: end;\n  }\n\n  .mainpage__container--img {\n    justify-self: start;\n  }\n\n  .mainpage__img {\n    min-width: 250px;\n    min-height: 400px;\n    max-height: 600px;\n    border-radius: 60px;\n  }\n\n  .header--panel {\n    display: block;\n    margin-bottom: 20px;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .panel {\n    padding: 0 60px;\n  }\n\n  .panel__container {\n    text-align: initial;\n  }\n\n  .panel__excursions {\n    justify-content: initial;\n    gap: 40px;\n    grid-template-columns: repeat(auto-fit, 330px);\n    padding-inline: unset;\n  }\n\n  .navbar__btn,\n  .header--logo::after,\n  .header--panel::after {\n    display: none;\n  }\n\n  .basket-btn__wrapper {\n    top: 40px;\n    right: calc(10px + 2vw);\n  }\n}","",{version:3,sources:["webpack://./src/css/client/desktop.css"],names:[],mappings:"AAAA;;EAEE;IACE,6BAA6B;EAC/B;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,kBAAkB;EACpB;;EAEA;IACE,eAAe;IACf,yBAAyB;EAC3B;;EAEA;IACE,WAAW;IACX,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,UAAU;IACV,oDAAoD;EACtD;;EAEA;IACE,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;IACrB,QAAQ;IACR,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;EACpB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,gBAAgB;IAChB,iBAAiB;IACjB,iBAAiB;IACjB,mBAAmB;EACrB;;EAEA;IACE,cAAc;IACd,mBAAmB;IACnB,oDAAoD;EACtD;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,wBAAwB;IACxB,SAAS;IACT,8CAA8C;IAC9C,qBAAqB;EACvB;;EAEA;;;IAGE,aAAa;EACf;;EAEA;IACE,SAAS;IACT,uBAAuB;EACzB;AACF",sourcesContent:["@media (min-width: 1200px) {\n\n  .navbar {\n    justify-content: space-evenly;\n  }\n\n  .navbar__container {\n    display: flex;\n  }\n\n  .navbar__item {\n    padding: 15px 25px;\n  }\n\n  .navbar__item:hover {\n    cursor: pointer;\n    background-color: #011E3F;\n  }\n\n  .wrapper--main::before {\n    content: '';\n    position: absolute;\n    top: 110px;\n    left: 8vw;\n    right: 8vw;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .mainpage {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    justify-items: center;\n    gap: 5vw;\n    padding-inline: 5vw;\n    margin-top: 60px;\n    margin-bottom: 7vh;\n  }\n\n  .mainpage__container {\n    justify-self: end;\n  }\n\n  .mainpage__container--img {\n    justify-self: start;\n  }\n\n  .mainpage__img {\n    min-width: 250px;\n    min-height: 400px;\n    max-height: 600px;\n    border-radius: 60px;\n  }\n\n  .header--panel {\n    display: block;\n    margin-bottom: 20px;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .panel {\n    padding: 0 60px;\n  }\n\n  .panel__container {\n    text-align: initial;\n  }\n\n  .panel__excursions {\n    justify-content: initial;\n    gap: 40px;\n    grid-template-columns: repeat(auto-fit, 330px);\n    padding-inline: unset;\n  }\n\n  .navbar__btn,\n  .header--logo::after,\n  .header--panel::after {\n    display: none;\n  }\n\n  .basket-btn__wrapper {\n    top: 40px;\n    right: calc(10px + 2vw);\n  }\n}"],sourceRoot:""}]);const a=o},813:(e,t,n)=>{n.d(t,{A:()=>g});var i=n(354),r=n.n(i),s=n(314),o=n.n(s),a=n(417),l=n.n(a),c=new URL(n(77),n.b),h=new URL(n(990),n.b),d=new URL(n(208),n.b),u=new URL(n(622),n.b),p=o()(r()),A=l()(c),_=l()(h),m=l()(d),f=l()(u);p.push([e.id,`:root {\n  font-size: 16px;\n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-semi-bold: 600;\n  --font-weight-bold: 700;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(${A});\n  font-weight: 400;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(${_});\n  font-weight: 500;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(${m});\n  font-weight: 600;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(${f});\n  font-weight: 700;\n}\n\n* {\n  font-family: 'Montserrat';\n  font-weight: var(--font-weight-normal);\n  color: white;\n}\n\n.text--navbar {\n  font-weight: var(--font-weight-medium);\n}\n\n.header--logo,\n.header--panel,\n.excursions__price {\n  font-weight: var(--font-weight-semi-bold);\n}\n\n.header--mainpage,\n.header__border {\n  font-weight: var(--font-weight-bold);\n}\n\n.header {\n  font-size: 1.5rem;\n}\n\n.header--mainpage {\n  font-size: 2.3rem;\n}\n\n.header--logo {\n  font-size: 1.2rem;\n}\n\n.text--navbar {\n  font-size: 1rem;\n}\n\n@media (min-width: 650px) {\n  .header {\n    font-size: 1.8rem;\n  }\n\n  .header--mainpage {\n    font-size: 3rem;\n  }\n\n  .header--logo {\n    font-size: 1.5rem;\n  }\n\n  .text--navbar {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 950px) {\n  .header--mainpage {\n    font-size: 4rem;\n  }\n\n  .mainpage__text {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 1200px) {\n  .header {\n    font-size: 2rem;\n  }\n\n  .header--mainpage {\n    font-size: 4.4rem;\n  }\n\n  .text--navbar {\n    font-size: 1rem;\n  }\n\n}`,"",{version:3,sources:["webpack://./src/css/client/fonts.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,yBAAyB;EACzB,yBAAyB;EACzB,4BAA4B;EAC5B,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;EACzB,4CAAuD;EACvD,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,4CAAsD;EACtD,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,4CAAwD;EACxD,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,4CAAoD;EACpD,gBAAgB;AAClB;;AAEA;EACE,yBAAyB;EACzB,sCAAsC;EACtC,YAAY;AACd;;AAEA;EACE,sCAAsC;AACxC;;AAEA;;;EAGE,yCAAyC;AAC3C;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,iBAAiB;EACnB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;;EAEA;IACE,iBAAiB;EACnB;AACF;;AAEA;EACE;IACE,eAAe;EACjB;;EAEA;IACE,iBAAiB;EACnB;;EAEA;IACE,eAAe;EACjB;;AAEF",sourcesContent:[":root {\n  font-size: 16px;\n  --font-weight-normal: 400;\n  --font-weight-medium: 500;\n  --font-weight-semi-bold: 600;\n  --font-weight-bold: 700;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(../../fonts/Montserrat/Montserrat-Regular.ttf);\n  font-weight: 400;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(../../fonts/Montserrat/Montserrat-Medium.ttf);\n  font-weight: 500;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(../../fonts/Montserrat/Montserrat-SemiBold.ttf);\n  font-weight: 600;\n}\n\n@font-face {\n  font-family: 'Montserrat';\n  src: url(../../fonts/Montserrat/Montserrat-Bold.ttf);\n  font-weight: 700;\n}\n\n* {\n  font-family: 'Montserrat';\n  font-weight: var(--font-weight-normal);\n  color: white;\n}\n\n.text--navbar {\n  font-weight: var(--font-weight-medium);\n}\n\n.header--logo,\n.header--panel,\n.excursions__price {\n  font-weight: var(--font-weight-semi-bold);\n}\n\n.header--mainpage,\n.header__border {\n  font-weight: var(--font-weight-bold);\n}\n\n.header {\n  font-size: 1.5rem;\n}\n\n.header--mainpage {\n  font-size: 2.3rem;\n}\n\n.header--logo {\n  font-size: 1.2rem;\n}\n\n.text--navbar {\n  font-size: 1rem;\n}\n\n@media (min-width: 650px) {\n  .header {\n    font-size: 1.8rem;\n  }\n\n  .header--mainpage {\n    font-size: 3rem;\n  }\n\n  .header--logo {\n    font-size: 1.5rem;\n  }\n\n  .text--navbar {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 950px) {\n  .header--mainpage {\n    font-size: 4rem;\n  }\n\n  .mainpage__text {\n    font-size: 1.2rem;\n  }\n}\n\n@media (min-width: 1200px) {\n  .header {\n    font-size: 2rem;\n  }\n\n  .header--mainpage {\n    font-size: 4.4rem;\n  }\n\n  .text--navbar {\n    font-size: 1rem;\n  }\n\n}"],sourceRoot:""}]);const g=p},446:(e,t,n)=>{n.d(t,{A:()=>u});var i=n(354),r=n.n(i),s=n(314),o=n.n(s),a=n(417),l=n.n(a),c=new URL(n(824),n.b),h=o()(r()),d=l()(c);h.push([e.id,`:root {\n  --primary-color: #517579;\n  --primary-color-bright: #658888;\n  --primary-color-stripe: #7a9e9e;\n  --secondary-color: #011E3F;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nul {\n  list-style: none;\n}\n\n.navbar {\n  position: fixed;\n  z-index: 999;\n  display: flex;\n  padding: 40px 60px;\n  width: 100vw;\n  height: 110px;\n  color: white;\n  background-color: transparent;\n}\n\n.navbar--background-scroll,\n.navbar--background-basket-btn,\n.navbar--background-navbar-btn {\n  background-color: var(--primary-color);\n}\n\n.navbar__item,\n.header--logo {\n  margin: auto 0;\n}\n\n.header--logo {\n  position: relative;\n}\n\n.wrapper--main {\n  min-height: 100vh;\n  padding-top: 130px;\n  background: linear-gradient(135deg, #517579 0%, #899280 100%);\n}\n.mainpage {\n  color: white;\n}\n\n.mainpage__container {\n  text-align: center;\n}\n\n.mainpage__text {\n  padding-inline: 5vw;\n}\n\n.header--mainpage {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n\n\n.header__border {\n  padding-inline: 10px;\n  border: 5px solid #ECA222;\n  border-radius: 100vw;\n}\n\n.excursions__item ::-webkit-scrollbar {\n  width: 0.5em;\n}\n\n.excursions__item ::-webkit-scrollbar-thumb {\n  border-radius: 100vw;\n  background-color: var(--secondary-color);\n}\n\n.excursions__item ::-webkit-scrollbar-track {\n  margin-block: 0.5em;\n  border-radius: 100vw;\n  background-color: white;\n}\n\n.panel__excursions {\n  display: grid;\n  padding-bottom: 40px;\n}\n\n\n.excursions__item {\n  display: flex;\n  flex-direction: column;\n  padding: 20px 40px;\n  gap: 30px;\n  background: linear-gradient(80deg, #517579 40%, #a9a483 250%);\n}\n\n.excursions__item:nth-child(odd) {\n  background: linear-gradient(130deg, #517579 40%, #a9a483 160%);\n}\n\n.excursions__name {\n  display: inline-block;\n  margin-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.excursions__description {\n  max-height: 150px;\n  overflow-y: auto;\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.excursions__field-error {\n  color: red;\n}\n\n.excursions__form {\n  margin-top: auto;\n}\n\n.excursions__field {\n  margin: auto 0;\n}\n\n.excursions__field-name {\n  display: grid;\n  justify-content: center;\n  gap: 10px;\n}\n\n.excursions__price-wrapper {\n  grid-column: 1 / 2;\n}\n\n.excursions__field-error {\n  grid-column: 1 / 3;\n  grid-row: 2 / 3\n}\n\n.excursions__field--submit {\n  text-align: center;\n}\n\n.excursions__field-input {\n  border: none;\n  color: white;\n  background-color: var(--primary-color-bright);\n}\n\n.excursions__field-input {\n  grid-column: 2 / 3;\n  justify-self: center;\n  text-align: center;\n}\n\n.excursions__field-input--submit {\n  padding: 20px;\n  margin-top: 30px;\n  border: 4px solid white;\n  background-color: var(--secondary-color);\n}\n\n\n.excursions__form> :first-child {\n  margin-bottom: 10px;\n}\n\n.navbar__toggle {\n  display: none;\n}\n\n.basket-btn {\n  display: none;\n}\n\n.basket-btn__wrapper {\n  position: absolute;\n  top: 37px;\n  right: 25px;\n  z-index: 999;\n}\n\n.basket-btn__icon {\n  content: url(${d});\n  width: 30px;\n  height: 30px;\n}\n\n.basket-btn__quantity {\n  position: absolute;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  height: 30px;\n}\n\n.excursions__item--prototype,\n.item-list__item--prototype {\n  display: none !important;\n}\n`,"",{version:3,sources:["webpack://./src/css/client/global.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,+BAA+B;EAC/B,+BAA+B;EAC/B,0BAA0B;AAC5B;;AAEA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,6BAA6B;AAC/B;;AAEA;;;EAGE,sCAAsC;AACxC;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,6DAA6D;AAC/D;AACA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EACT,mBAAmB;AACrB;;;;AAIA;EACE,oBAAoB;EACpB,yBAAyB;EACzB,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,wCAAwC;AAC1C;;AAEA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,oBAAoB;AACtB;;;AAGA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,SAAS;EACT,6DAA6D;AAC/D;;AAEA;EACE,8DAA8D;AAChE;;AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,oDAAoD;AACtD;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,oBAAoB;EACpB,oDAAoD;AACtD;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB;AACF;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,6CAA6C;AAC/C;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,uBAAuB;EACvB,wCAAwC;AAC1C;;;AAGA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;AACd;;AAEA;EACE,gDAA0C;EAC1C,WAAW;EACX,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,wBAAwB;AAC1B",sourcesContent:[":root {\n  --primary-color: #517579;\n  --primary-color-bright: #658888;\n  --primary-color-stripe: #7a9e9e;\n  --secondary-color: #011E3F;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nul {\n  list-style: none;\n}\n\n.navbar {\n  position: fixed;\n  z-index: 999;\n  display: flex;\n  padding: 40px 60px;\n  width: 100vw;\n  height: 110px;\n  color: white;\n  background-color: transparent;\n}\n\n.navbar--background-scroll,\n.navbar--background-basket-btn,\n.navbar--background-navbar-btn {\n  background-color: var(--primary-color);\n}\n\n.navbar__item,\n.header--logo {\n  margin: auto 0;\n}\n\n.header--logo {\n  position: relative;\n}\n\n.wrapper--main {\n  min-height: 100vh;\n  padding-top: 130px;\n  background: linear-gradient(135deg, #517579 0%, #899280 100%);\n}\n.mainpage {\n  color: white;\n}\n\n.mainpage__container {\n  text-align: center;\n}\n\n.mainpage__text {\n  padding-inline: 5vw;\n}\n\n.header--mainpage {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n\n\n.header__border {\n  padding-inline: 10px;\n  border: 5px solid #ECA222;\n  border-radius: 100vw;\n}\n\n.excursions__item ::-webkit-scrollbar {\n  width: 0.5em;\n}\n\n.excursions__item ::-webkit-scrollbar-thumb {\n  border-radius: 100vw;\n  background-color: var(--secondary-color);\n}\n\n.excursions__item ::-webkit-scrollbar-track {\n  margin-block: 0.5em;\n  border-radius: 100vw;\n  background-color: white;\n}\n\n.panel__excursions {\n  display: grid;\n  padding-bottom: 40px;\n}\n\n\n.excursions__item {\n  display: flex;\n  flex-direction: column;\n  padding: 20px 40px;\n  gap: 30px;\n  background: linear-gradient(80deg, #517579 40%, #a9a483 250%);\n}\n\n.excursions__item:nth-child(odd) {\n  background: linear-gradient(130deg, #517579 40%, #a9a483 160%);\n}\n\n.excursions__name {\n  display: inline-block;\n  margin-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.excursions__description {\n  max-height: 150px;\n  overflow-y: auto;\n  padding-bottom: 10px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.excursions__field-error {\n  color: red;\n}\n\n.excursions__form {\n  margin-top: auto;\n}\n\n.excursions__field {\n  margin: auto 0;\n}\n\n.excursions__field-name {\n  display: grid;\n  justify-content: center;\n  gap: 10px;\n}\n\n.excursions__price-wrapper {\n  grid-column: 1 / 2;\n}\n\n.excursions__field-error {\n  grid-column: 1 / 3;\n  grid-row: 2 / 3\n}\n\n.excursions__field--submit {\n  text-align: center;\n}\n\n.excursions__field-input {\n  border: none;\n  color: white;\n  background-color: var(--primary-color-bright);\n}\n\n.excursions__field-input {\n  grid-column: 2 / 3;\n  justify-self: center;\n  text-align: center;\n}\n\n.excursions__field-input--submit {\n  padding: 20px;\n  margin-top: 30px;\n  border: 4px solid white;\n  background-color: var(--secondary-color);\n}\n\n\n.excursions__form> :first-child {\n  margin-bottom: 10px;\n}\n\n.navbar__toggle {\n  display: none;\n}\n\n.basket-btn {\n  display: none;\n}\n\n.basket-btn__wrapper {\n  position: absolute;\n  top: 37px;\n  right: 25px;\n  z-index: 999;\n}\n\n.basket-btn__icon {\n  content: url(../../assets/basket_icon.svg);\n  width: 30px;\n  height: 30px;\n}\n\n.basket-btn__quantity {\n  position: absolute;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  height: 30px;\n}\n\n.excursions__item--prototype,\n.item-list__item--prototype {\n  display: none !important;\n}\n"],sourceRoot:""}]);const u=h},461:(e,t,n)=>{n.d(t,{A:()=>A});var i=n(354),r=n.n(i),s=n(314),o=n.n(s),a=n(417),l=n.n(a),c=new URL(n(241),n.b),h=new URL(n(970),n.b),d=o()(r()),u=l()(c),p=l()(h);d.push([e.id,`.navbar {\n  justify-content: center;\n}\n\n  .navbar__container--mobile {\n    position: absolute;\n    top: 110px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    padding-block: 20px 40px;\n    width: 100vw;\n    border-block: 3px solid var(--primary-color-stripe);\n    background-color: var(--primary-color);\n  }\n\n  .navbar__container--open {\n    display: flex;\n  }\n\n  .navbar__item--mobile {\n    text-align: center;\n    padding-block: 20px 15px;\n    padding-inline: 30px;\n    margin-bottom: 5px;\n    border-radius: 6px;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .navbar__item--mobile:hover {\n    padding-bottom: 20px;\n    margin-bottom: 0;\n    border-bottom: 3px solid transparent;\n    border-radius: 20px;\n    background-color: var(--secondary-color);\n  }\n\n\n.navbar__btn {\n  position: absolute;\n  top: 37px;\n  left: 10px;\n  content: url(${u});\n  width: 30px;\n  height: 30px;\n}\n\n.navbar__btn--checked {\n  content: url(${p});\n}\n\n.basket-btn__quantity {\n  top: 36px;\n  left: 0px;\n  border-radius: 100vw;\n  background-color: var(--primary-color-bright);\n  border: 3px solid var(--primary-color-stripe);\n}\n\n@media (min-width: 650px) {\n\n  .navbar__btn,\n  .basket-btn__icon {\n    width: 40px;\n    height: 40px;\n  }\n\n  .basket-btn__quantity {\n    top: 11px;\n    left: 5px;\n    border: unset;\n    background-color: unset;\n  }\n}\n\n.panel__container {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.header--panel {\n  display: inline-block;\n  position: relative;\n}\n\n.header--panel::after {\n  content: '';\n  position: absolute;\n  top: 35px;\n  left: -20px;\n  right: -20px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.text--mainpage {\n  padding-inline: 20px;\n}\n\n.header--logo::after {\n  content: '';\n  position: absolute;\n  top: 35px;\n  left: -20px;\n  right: -20px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.mainpage {\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin-top: 20px;\n}\n\n.text--mainpage {\n  padding-inline: 20px;\n}\n\n.panel__excursions {\n  justify-content: center;\n  column-gap: 60px;\n  row-gap: 40px;\n  grid-template-columns: minmax(260px, 360px);\n  padding-inline: unset;\n}\n\n.navbar__btn {\n  left: 10px;\n}\n\n.basket-btn__wrapper {\n  top: 30px;\n  right: 10px;\n}\n\n\n@media (min-width: 360px) {\n  .navbar__btn {\n    left: 25px;\n  }\n\n  .basket-btn__wrapper {\n    right: 25px;\n  }\n\n  .panel__excursions {\n    padding-inline: 10vw;\n  }\n\n}\n\n@media (min-width: 950px) {\n  .panel__excursions {\n    grid-template-columns: 360px 360px;\n    padding-inline: 10vw;\n  }\n}`,"",{version:3,sources:["webpack://./src/css/client/mobile.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB;;EAEE;IACE,kBAAkB;IAClB,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,wBAAwB;IACxB,YAAY;IACZ,mDAAmD;IACnD,sCAAsC;EACxC;;EAEA;IACE,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,wBAAwB;IACxB,oBAAoB;IACpB,kBAAkB;IAClB,kBAAkB;IAClB,oDAAoD;EACtD;;EAEA;IACE,oBAAoB;IACpB,gBAAgB;IAChB,oCAAoC;IACpC,mBAAmB;IACnB,wCAAwC;EAC1C;;;AAGF;EACE,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,gDAA6C;EAC7C,WAAW;EACX,YAAY;AACd;;AAEA;EACE,gDAAyC;AAC3C;;AAEA;EACE,SAAS;EACT,SAAS;EACT,oBAAoB;EACpB,6CAA6C;EAC7C,6CAA6C;AAC/C;;AAEA;;EAEE;;IAEE,WAAW;IACX,YAAY;EACd;;EAEA;IACE,SAAS;IACT,SAAS;IACT,aAAa;IACb,uBAAuB;EACzB;AACF;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,oDAAoD;AACtD;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,oDAAoD;AACtD;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;EAChB,aAAa;EACb,2CAA2C;EAC3C,qBAAqB;AACvB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,SAAS;EACT,WAAW;AACb;;;AAGA;EACE;IACE,UAAU;EACZ;;EAEA;IACE,WAAW;EACb;;EAEA;IACE,oBAAoB;EACtB;;AAEF;;AAEA;EACE;IACE,kCAAkC;IAClC,oBAAoB;EACtB;AACF",sourcesContent:[".navbar {\n  justify-content: center;\n}\n\n  .navbar__container--mobile {\n    position: absolute;\n    top: 110px;\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    padding-block: 20px 40px;\n    width: 100vw;\n    border-block: 3px solid var(--primary-color-stripe);\n    background-color: var(--primary-color);\n  }\n\n  .navbar__container--open {\n    display: flex;\n  }\n\n  .navbar__item--mobile {\n    text-align: center;\n    padding-block: 20px 15px;\n    padding-inline: 30px;\n    margin-bottom: 5px;\n    border-radius: 6px;\n    border-bottom: 3px solid var(--primary-color-stripe);\n  }\n\n  .navbar__item--mobile:hover {\n    padding-bottom: 20px;\n    margin-bottom: 0;\n    border-bottom: 3px solid transparent;\n    border-radius: 20px;\n    background-color: var(--secondary-color);\n  }\n\n\n.navbar__btn {\n  position: absolute;\n  top: 37px;\n  left: 10px;\n  content: url(../../assets/hamburger_icon.svg);\n  width: 30px;\n  height: 30px;\n}\n\n.navbar__btn--checked {\n  content: url(../../assets/cross_icon.svg);\n}\n\n.basket-btn__quantity {\n  top: 36px;\n  left: 0px;\n  border-radius: 100vw;\n  background-color: var(--primary-color-bright);\n  border: 3px solid var(--primary-color-stripe);\n}\n\n@media (min-width: 650px) {\n\n  .navbar__btn,\n  .basket-btn__icon {\n    width: 40px;\n    height: 40px;\n  }\n\n  .basket-btn__quantity {\n    top: 11px;\n    left: 5px;\n    border: unset;\n    background-color: unset;\n  }\n}\n\n.panel__container {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.header--panel {\n  display: inline-block;\n  position: relative;\n}\n\n.header--panel::after {\n  content: '';\n  position: absolute;\n  top: 35px;\n  left: -20px;\n  right: -20px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.text--mainpage {\n  padding-inline: 20px;\n}\n\n.header--logo::after {\n  content: '';\n  position: absolute;\n  top: 35px;\n  left: -20px;\n  right: -20px;\n  border-bottom: 3px solid var(--primary-color-stripe);\n}\n\n.mainpage {\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin-top: 20px;\n}\n\n.text--mainpage {\n  padding-inline: 20px;\n}\n\n.panel__excursions {\n  justify-content: center;\n  column-gap: 60px;\n  row-gap: 40px;\n  grid-template-columns: minmax(260px, 360px);\n  padding-inline: unset;\n}\n\n.navbar__btn {\n  left: 10px;\n}\n\n.basket-btn__wrapper {\n  top: 30px;\n  right: 10px;\n}\n\n\n@media (min-width: 360px) {\n  .navbar__btn {\n    left: 25px;\n  }\n\n  .basket-btn__wrapper {\n    right: 25px;\n  }\n\n  .panel__excursions {\n    padding-inline: 10vw;\n  }\n\n}\n\n@media (min-width: 950px) {\n  .panel__excursions {\n    grid-template-columns: 360px 360px;\n    padding-inline: 10vw;\n  }\n}"],sourceRoot:""}]);const A=d},790:(e,t,n)=>{n.d(t,{A:()=>a});var i=n(354),r=n.n(i),s=n(314),o=n.n(s)()(r());o.push([e.id,'html, body, body div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, figure, footer, header, menu, nav, section, time, mark, audio, video, details, summary {margin: 0; padding: 0; border: 0; font-size: 100%; font-weight: normal; vertical-align: baseline; background: transparent;}\n\nmain, article, aside, figure, footer, header, nav, section, details, summary {display: block;}\n\nhtml {box-sizing: border-box;}\n\n*, *:before, *:after {box-sizing: inherit;}\n\nimg {max-width: 100%;}\n\nul {list-style: none;} /* we\'ll restore bullets as needed for content */\n\nblockquote, q {quotes: none;}\n\nblockquote:before, blockquote:after, q:before, q:after {content: \'\'; content: none;}\n\na {margin: 0; padding: 0; font-size: 100%; vertical-align: baseline; background: transparent;}\n\ndel {text-decoration: line-through;}\n\nabbr[title], dfn[title] {border-bottom: 1px dotted #000; cursor: help;}\n\ntable {border-collapse: separate; border-spacing: 0; text-align: left;}\nth {font-weight: bold; vertical-align: bottom;}\ntd {font-weight: normal; vertical-align: top;}\ntd img {vertical-align: top;}\n\nhr {display: block; height: 1px; border: 0; border-top: 1px solid #999; margin: 1rem 0; padding: 0;}\n\ninput, select {vertical-align: middle;}\n\npre {white-space: pre-line;}\n\ninput[type="radio"] {vertical-align: text-bottom;}\ninput[type="checkbox"] {vertical-align: bottom;}\n\nsmall {font-size: .8rem;}\n\nstrong {font-weight: bold;}\n\nsub, sup {font-size: .8rem; line-height: 0; position: relative;}\nsup {top: -0.5rem;}\nsub {bottom: -0.25rem;}\n\npre, code, kbd, samp {font-family: monospace, sans-serif;}\n\nlabel, input[type=button], input[type=submit], input[type=file], button {cursor: pointer;}\n\nbutton, input, select, textarea {margin: 0;}\n\nins {background-color: var(--highlight-color); color: #000; text-decoration: none;}\nmark {background-color: var(--highlight-color); color: #000; font-style: italic; font-weight: bold;}\n\nblockquote {padding: 2rem; border-left: 1px solid #333;}\n\n.clearfix:after {content: ""; display: table; clear: both;} /* https://css-tricks.com/snippets/css/clear-fix/ */\n\n/* ———— END THE GENERIC RESETS ———— */\n\n:root {\n\t--font-system: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; /* https://css-tricks.com/snippets/css/system-font-stack */\n\t--text-color: #333;\n\t--featured-color: #03f;\n\t--featured-color-hover: #69f;\n\t--highlight-color: #fcd700;\n}\n\nbody {font-size: 16px; font-family: var(--font-system); color: var(--text-color);}\n\na {color: var(--featured-color);}\na:hover {color: var(--featured-color-hover);}\n\n@media screen and (max-width: 480px) {\n\t\n}\n\n@media print {\n\t\n}',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"AAAA,6YAA6Y,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,mBAAmB,EAAE,wBAAwB,EAAE,uBAAuB,CAAC;;AAEvgB,8EAA8E,cAAc,CAAC;;AAE7F,MAAM,sBAAsB,CAAC;;AAE7B,sBAAsB,mBAAmB,CAAC;;AAE1C,KAAK,eAAe,CAAC;;AAErB,IAAI,gBAAgB,CAAC,EAAE,gDAAgD;;AAEvE,eAAe,YAAY,CAAC;;AAE5B,wDAAwD,WAAW,EAAE,aAAa,CAAC;;AAEnF,GAAG,SAAS,EAAE,UAAU,EAAE,eAAe,EAAE,wBAAwB,EAAE,uBAAuB,CAAC;;AAE7F,KAAK,6BAA6B,CAAC;;AAEnC,yBAAyB,8BAA8B,EAAE,YAAY,CAAC;;AAEtE,OAAO,yBAAyB,EAAE,iBAAiB,EAAE,gBAAgB,CAAC;AACtE,IAAI,iBAAiB,EAAE,sBAAsB,CAAC;AAC9C,IAAI,mBAAmB,EAAE,mBAAmB,CAAC;AAC7C,QAAQ,mBAAmB,CAAC;;AAE5B,IAAI,cAAc,EAAE,WAAW,EAAE,SAAS,EAAE,0BAA0B,EAAE,cAAc,EAAE,UAAU,CAAC;;AAEnG,eAAe,sBAAsB,CAAC;;AAEtC,KAAK,qBAAqB,CAAC;;AAE3B,qBAAqB,2BAA2B,CAAC;AACjD,wBAAwB,sBAAsB,CAAC;;AAE/C,OAAO,gBAAgB,CAAC;;AAExB,QAAQ,iBAAiB,CAAC;;AAE1B,UAAU,gBAAgB,EAAE,cAAc,EAAE,kBAAkB,CAAC;AAC/D,KAAK,YAAY,CAAC;AAClB,KAAK,gBAAgB,CAAC;;AAEtB,sBAAsB,kCAAkC,CAAC;;AAEzD,yEAAyE,eAAe,CAAC;;AAEzF,iCAAiC,SAAS,CAAC;;AAE3C,KAAK,wCAAwC,EAAE,WAAW,EAAE,qBAAqB,CAAC;AAClF,MAAM,wCAAwC,EAAE,WAAW,EAAE,kBAAkB,EAAE,iBAAiB,CAAC;;AAEnG,YAAY,aAAa,EAAE,2BAA2B,CAAC;;AAEvD,iBAAiB,WAAW,EAAE,cAAc,EAAE,WAAW,CAAC,EAAE,mDAAmD;;AAE/G,qCAAqC;;AAErC;CACC,oIAAoI,EAAE,0DAA0D;CAChM,kBAAkB;CAClB,sBAAsB;CACtB,4BAA4B;CAC5B,0BAA0B;AAC3B;;AAEA,MAAM,eAAe,EAAE,+BAA+B,EAAE,wBAAwB,CAAC;;AAEjF,GAAG,4BAA4B,CAAC;AAChC,SAAS,kCAAkC,CAAC;;AAE5C;;AAEA;;AAEA;;AAEA",sourcesContent:['html, body, body div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, figure, footer, header, menu, nav, section, time, mark, audio, video, details, summary {margin: 0; padding: 0; border: 0; font-size: 100%; font-weight: normal; vertical-align: baseline; background: transparent;}\n\nmain, article, aside, figure, footer, header, nav, section, details, summary {display: block;}\n\nhtml {box-sizing: border-box;}\n\n*, *:before, *:after {box-sizing: inherit;}\n\nimg {max-width: 100%;}\n\nul {list-style: none;} /* we\'ll restore bullets as needed for content */\n\nblockquote, q {quotes: none;}\n\nblockquote:before, blockquote:after, q:before, q:after {content: \'\'; content: none;}\n\na {margin: 0; padding: 0; font-size: 100%; vertical-align: baseline; background: transparent;}\n\ndel {text-decoration: line-through;}\n\nabbr[title], dfn[title] {border-bottom: 1px dotted #000; cursor: help;}\n\ntable {border-collapse: separate; border-spacing: 0; text-align: left;}\nth {font-weight: bold; vertical-align: bottom;}\ntd {font-weight: normal; vertical-align: top;}\ntd img {vertical-align: top;}\n\nhr {display: block; height: 1px; border: 0; border-top: 1px solid #999; margin: 1rem 0; padding: 0;}\n\ninput, select {vertical-align: middle;}\n\npre {white-space: pre-line;}\n\ninput[type="radio"] {vertical-align: text-bottom;}\ninput[type="checkbox"] {vertical-align: bottom;}\n\nsmall {font-size: .8rem;}\n\nstrong {font-weight: bold;}\n\nsub, sup {font-size: .8rem; line-height: 0; position: relative;}\nsup {top: -0.5rem;}\nsub {bottom: -0.25rem;}\n\npre, code, kbd, samp {font-family: monospace, sans-serif;}\n\nlabel, input[type=button], input[type=submit], input[type=file], button {cursor: pointer;}\n\nbutton, input, select, textarea {margin: 0;}\n\nins {background-color: var(--highlight-color); color: #000; text-decoration: none;}\nmark {background-color: var(--highlight-color); color: #000; font-style: italic; font-weight: bold;}\n\nblockquote {padding: 2rem; border-left: 1px solid #333;}\n\n.clearfix:after {content: ""; display: table; clear: both;} /* https://css-tricks.com/snippets/css/clear-fix/ */\n\n/* ———— END THE GENERIC RESETS ———— */\n\n:root {\n\t--font-system: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; /* https://css-tricks.com/snippets/css/system-font-stack */\n\t--text-color: #333;\n\t--featured-color: #03f;\n\t--featured-color-hover: #69f;\n\t--highlight-color: #fcd700;\n}\n\nbody {font-size: 16px; font-family: var(--font-system); color: var(--text-color);}\n\na {color: var(--featured-color);}\na:hover {color: var(--featured-color-hover);}\n\n@media screen and (max-width: 480px) {\n\t\n}\n\n@media print {\n\t\n}'],sourceRoot:""}]);const a=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,r,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var h=[].concat(e[c]);i&&o[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),t.push(h))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(r," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var s={},o=[],a=0;a<e.length;a++){var l=e[a],c=i.base?l[0]+i.base:l[0],h=s[c]||0,d="".concat(c," ").concat(h);s[c]=h+1;var u=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var A=r(p,i);i.byIndex=a,t.splice(a,0,{identifier:d,updater:A,references:1})}o.push(d)}return o}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var s=i(e=e||[],r=r||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var l=i(e,r),c=0;c<s.length;c++){var h=n(s[c]);0===t[h].references&&(t[h].updater(),t.splice(h,1))}s=l}}},659:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},824:(e,t,n)=>{e.exports=n.p+"a0d0c97973b816dcc1b2.svg"},970:(e,t,n)=>{e.exports=n.p+"287ba5cd99810a2323d6.svg"},637:(e,t,n)=>{e.exports=n.p+"b83a848878554af35c1f.svg"},241:(e,t,n)=>{e.exports=n.p+"e0a03a53be72ddd29741.svg"},622:(e,t,n)=>{e.exports=n.p+"50f0257aa1e905f4bfaf.ttf"},990:(e,t,n)=>{e.exports=n.p+"b8c6753baa964ccac1ba.ttf"},77:(e,t,n)=>{e.exports=n.p+"24785cc015b27a3e964b.ttf"},208:(e,t,n)=>{e.exports=n.p+"93b37a465fc4ec0d0415.ttf"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var r=i.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=i[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(72),t=n.n(e),i=n(825),r=n.n(i),s=n(659),o=n.n(s),a=n(56),l=n.n(a),c=n(540),h=n.n(c),d=n(113),u=n.n(d),p=n(790),A={};A.styleTagTransform=u(),A.setAttributes=l(),A.insert=o().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=h(),t()(p.A,A),p.A&&p.A.locals&&p.A.locals;var _=n(813),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=o().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=h(),t()(_.A,m),_.A&&_.A.locals&&_.A.locals;var f=n(446),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=o().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=h(),t()(f.A,g),f.A&&f.A.locals&&f.A.locals;var C=n(461),y={};y.styleTagTransform=u(),y.setAttributes=l(),y.insert=o().bind(null,"head"),y.domAPI=r(),y.insertStyleElement=h(),t()(C.A,y),C.A&&C.A.locals&&C.A.locals;var b=n(751),E={};E.styleTagTransform=u(),E.setAttributes=l(),E.insert=o().bind(null,"head"),E.domAPI=r(),E.insertStyleElement=h(),t()(b.A,E),b.A&&b.A.locals&&b.A.locals;var v=n(609),w={};w.styleTagTransform=u(),w.setAttributes=l(),w.insert=o().bind(null,"head"),w.domAPI=r(),w.insertStyleElement=h(),t()(v.A,w),v.A&&v.A.locals&&v.A.locals;var x=n(420),k={};k.styleTagTransform=u(),k.setAttributes=l(),k.insert=o().bind(null,"head"),k.domAPI=r(),k.insertStyleElement=h(),t()(x.A,k),x.A&&x.A.locals&&x.A.locals;const I=function(e,t){if(!e)throw B(t)},B=function(e){return new Error("Firebase Database (${JSCORE_VERSION}) INTERNAL ASSERT FAILED: "+e)},T=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let r=e.charCodeAt(i);r<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):55296==(64512&r)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(r=65536+((1023&r)<<10)+(1023&e.charCodeAt(++i)),t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128)}return t},S={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const r=e[t],s=t+1<e.length,o=s?e[t+1]:0,a=t+2<e.length,l=a?e[t+2]:0,c=r>>2,h=(3&r)<<4|o>>4;let d=(15&o)<<2|l>>6,u=63&l;a||(u=64,s||(d=64)),i.push(n[c],n[h],n[d],n[u])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(T(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,i=0;for(;n<e.length;){const r=e[n++];if(r<128)t[i++]=String.fromCharCode(r);else if(r>191&&r<224){const s=e[n++];t[i++]=String.fromCharCode((31&r)<<6|63&s)}else if(r>239&&r<365){const s=((7&r)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[i++]=String.fromCharCode(55296+(s>>10)),t[i++]=String.fromCharCode(56320+(1023&s))}else{const s=e[n++],o=e[n++];t[i++]=String.fromCharCode((15&r)<<12|(63&s)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const r=n[e.charAt(t++)],s=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==r||null==s||null==o||null==a)throw new N;const l=r<<2|s>>4;if(i.push(l),64!==o){const e=s<<4&240|o>>2;if(i.push(e),64!==a){const e=o<<6&192|a;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class N extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const P=function(e){const t=T(e);return S.encodeByteArray(t,!0)},D=function(e){return P(e).replace(/\./g,"")},R=function(e){try{return S.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function O(e){return M(void 0,e)}function M(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const n in t)t.hasOwnProperty(n)&&"__proto__"!==n&&(e[n]=M(e[n],t[n]));return e}const L=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&R(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},q=()=>{var e;return null===(e=L())||void 0===e?void 0:e.config};class F{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function z(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:"")}class U extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,U.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,W.prototype.create)}}class W{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},i=`${this.service}/${e}`,r=this.errors[e],s=r?function(e,t){return e.replace(j,((e,n)=>{const i=t[n];return null!=i?String(i):`<${n}?>`}))}(r,n):"Error",o=`${this.serviceName}: ${s} (${i}).`;return new U(i,o,n)}}const j=/\{\$([^}]+)}/g;function H(e){return JSON.parse(e)}function $(e){return JSON.stringify(e)}const Y=function(e){let t={},n={},i={},r="";try{const s=e.split(".");t=H(R(s[0])||""),n=H(R(s[1])||""),r=s[2],i=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:i,signature:r}};function V(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function G(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function K(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function Q(e,t,n){const i={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(i[r]=t.call(n,e[r],r,e));return i}function X(e,t){if(e===t)return!0;const n=Object.keys(e),i=Object.keys(t);for(const r of n){if(!i.includes(r))return!1;const n=e[r],s=t[r];if(Z(n)&&Z(s)){if(!X(n,s))return!1}else if(n!==s)return!1}for(const e of i)if(!n.includes(e))return!1;return!0}function Z(e){return null!==e&&"object"==typeof e}class J{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const n=this.W_;if("string"==typeof e)for(let i=0;i<16;i++)n[i]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let i=0;i<16;i++)n[i]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=n[e-3]^n[e-8]^n[e-14]^n[e-16];n[e]=4294967295&(t<<1|t>>>31)}let i,r,s=this.chain_[0],o=this.chain_[1],a=this.chain_[2],l=this.chain_[3],c=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(i=l^o&(a^l),r=1518500249):(i=o^a^l,r=1859775393):e<60?(i=o&a|l&(o|a),r=2400959708):(i=o^a^l,r=3395469782);const t=(s<<5|s>>>27)+i+c+r+n[e]&4294967295;c=l,l=a,a=4294967295&(o<<30|o>>>2),o=s,s=t}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+a&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const n=t-this.blockSize;let i=0;const r=this.buf_;let s=this.inbuf_;for(;i<t;){if(0===s)for(;i<=n;)this.compress_(e,i),i+=this.blockSize;if("string"==typeof e){for(;i<t;)if(r[s]=e.charCodeAt(i),++s,++i,s===this.blockSize){this.compress_(r),s=0;break}}else for(;i<t;)if(r[s]=e[i],++s,++i,s===this.blockSize){this.compress_(r),s=0;break}}this.inbuf_=s,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let n=0;for(let t=0;t<5;t++)for(let i=24;i>=0;i-=8)e[n]=this.chain_[t]>>i&255,++n;return e}}function ee(e,t){return`${e} failed: ${t} argument `}const te=function(e){let t=0;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);i<128?t++:i<2048?t+=2:i>=55296&&i<=56319?(t+=4,n++):t+=3}return t};function ne(e){return e&&e._delegate?e._delegate:e}class ie{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const re="[DEFAULT]";class se{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new F;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:re})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e=re){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=re){return this.instances.has(e)}getOptions(e=re){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(i);return i}onInit(e,t){var n;const i=this.normalizeInstanceIdentifier(t),r=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;r.add(e),this.onInitCallbacks.set(i,r);const s=this.instances.get(i);return s&&e(s,i),()=>{r.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const i of n)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===re?void 0:i),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var i;return n||null}normalizeInstanceIdentifier(e=re){return this.component?this.component.multipleInstances?e:re:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class oe{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new se(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const ae=[];var le;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(le||(le={}));const ce={debug:le.DEBUG,verbose:le.VERBOSE,info:le.INFO,warn:le.WARN,error:le.ERROR,silent:le.SILENT},he=le.INFO,de={[le.DEBUG]:"log",[le.VERBOSE]:"log",[le.INFO]:"info",[le.WARN]:"warn",[le.ERROR]:"error"},ue=(e,t,...n)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),r=de[t];if(!r)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[r](`[${i}]  ${e.name}:`,...n)};class pe{constructor(e){this.name=e,this._logLevel=he,this._logHandler=ue,this._userLogHandler=null,ae.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in le))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?ce[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,le.DEBUG,...e),this._logHandler(this,le.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,le.VERBOSE,...e),this._logHandler(this,le.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,le.INFO,...e),this._logHandler(this,le.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,le.WARN,...e),this._logHandler(this,le.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,le.ERROR,...e),this._logHandler(this,le.ERROR,...e)}}const Ae=(e,t)=>t.some((t=>e instanceof t));let _e,me;const fe=new WeakMap,ge=new WeakMap,Ce=new WeakMap,ye=new WeakMap,be=new WeakMap;let Ee={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return ge.get(e);if("objectStoreNames"===t)return e.objectStoreNames||Ce.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return we(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function ve(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(me||(me=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(xe(this),e),we(fe.get(this))}:function(...e){return we(t.apply(xe(this),e))}:function(e,...n){const i=t.call(xe(this),e,...n);return Ce.set(i,e.sort?e.sort():[e]),we(i)}:(e instanceof IDBTransaction&&function(e){if(ge.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",s),e.removeEventListener("abort",s)},r=()=>{t(),i()},s=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",r),e.addEventListener("error",s),e.addEventListener("abort",s)}));ge.set(e,t)}(e),Ae(e,_e||(_e=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,Ee):e);var t}function we(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",r),e.removeEventListener("error",s)},r=()=>{t(we(e.result)),i()},s=()=>{n(e.error),i()};e.addEventListener("success",r),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&fe.set(t,e)})).catch((()=>{})),be.set(t,e),t}(e);if(ye.has(e))return ye.get(e);const t=ve(e);return t!==e&&(ye.set(e,t),be.set(t,e)),t}const xe=e=>be.get(e),ke=["get","getKey","getAll","getAllKeys","count"],Ie=["put","add","delete","clear"],Be=new Map;function Te(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Be.get(t))return Be.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,r=Ie.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!r&&!ke.includes(n))return;const s=async function(e,...t){const s=this.transaction(e,r?"readwrite":"readonly");let o=s.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),r&&s.done]))[0]};return Be.set(t,s),s}var Se;Se=Ee,Ee={...Se,get:(e,t,n)=>Te(e,t)||Se.get(e,t,n),has:(e,t)=>!!Te(e,t)||Se.has(e,t)};class Ne{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const Pe="@firebase/app",De="0.10.16",Re=new pe("@firebase/app"),Oe="@firebase/app-compat",Me="@firebase/analytics-compat",Le="@firebase/analytics",qe="@firebase/app-check-compat",Fe="@firebase/app-check",ze="@firebase/auth",Ue="@firebase/auth-compat",We="@firebase/database",je="@firebase/data-connect",He="@firebase/database-compat",$e="@firebase/functions",Ye="@firebase/functions-compat",Ve="@firebase/installations",Ge="@firebase/installations-compat",Ke="@firebase/messaging",Qe="@firebase/messaging-compat",Xe="@firebase/performance",Ze="@firebase/performance-compat",Je="@firebase/remote-config",et="@firebase/remote-config-compat",tt="@firebase/storage",nt="@firebase/storage-compat",it="@firebase/firestore",rt="@firebase/vertexai",st="@firebase/firestore-compat",ot="firebase",at="[DEFAULT]",lt={[Pe]:"fire-core",[Oe]:"fire-core-compat",[Le]:"fire-analytics",[Me]:"fire-analytics-compat",[Fe]:"fire-app-check",[qe]:"fire-app-check-compat",[ze]:"fire-auth",[Ue]:"fire-auth-compat",[We]:"fire-rtdb",[je]:"fire-data-connect",[He]:"fire-rtdb-compat",[$e]:"fire-fn",[Ye]:"fire-fn-compat",[Ve]:"fire-iid",[Ge]:"fire-iid-compat",[Ke]:"fire-fcm",[Qe]:"fire-fcm-compat",[Xe]:"fire-perf",[Ze]:"fire-perf-compat",[Je]:"fire-rc",[et]:"fire-rc-compat",[tt]:"fire-gcs",[nt]:"fire-gcs-compat",[it]:"fire-fst",[st]:"fire-fst-compat",[rt]:"fire-vertex","fire-js":"fire-js",[ot]:"fire-js-all"},ct=new Map,ht=new Map,dt=new Map;function ut(e,t){try{e.container.addComponent(t)}catch(n){Re.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function pt(e){const t=e.name;if(dt.has(t))return Re.debug(`There were multiple attempts to register component ${t}.`),!1;dt.set(t,e);for(const t of ct.values())ut(t,e);for(const t of ht.values())ut(t,e);return!0}const At=new W("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}'","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","server-app-deleted":"Firebase Server App has been deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.","finalization-registry-not-supported":"FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.","invalid-server-app-environment":"FirebaseServerApp is not for use in browser environments."});class _t{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new ie("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw At.create("app-deleted",{appName:this._name})}}function mt(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const i=Object.assign({name:at,automaticDataCollectionEnabled:!1},t),r=i.name;if("string"!=typeof r||!r)throw At.create("bad-app-name",{appName:String(r)});if(n||(n=q()),!n)throw At.create("no-options");const s=ct.get(r);if(s){if(X(n,s.options)&&X(i,s.config))return s;throw At.create("duplicate-app",{appName:r})}const o=new oe(r);for(const e of dt.values())o.addComponent(e);const a=new _t(n,i,o);return ct.set(r,a),a}function ft(e,t,n){var i;let r=null!==(i=lt[e])&&void 0!==i?i:e;n&&(r+=`-${n}`);const s=r.match(/\s|\//),o=t.match(/\s|\//);if(s||o){const e=[`Unable to register library "${r}" with version "${t}":`];return s&&e.push(`library name "${r}" contains illegal characters (whitespace or "/")`),s&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void Re.warn(e.join(" "))}pt(new ie(`${r}-version`,(()=>({library:r,version:t})),"VERSION"))}const gt="firebase-heartbeat-database",Ct=1,yt="firebase-heartbeat-store";let bt=null;function Et(){return bt||(bt=function(e,t,{blocked:n,upgrade:i,blocking:r,terminated:s}={}){const o=indexedDB.open(e,t),a=we(o);return i&&o.addEventListener("upgradeneeded",(e=>{i(we(o.result),e.oldVersion,e.newVersion,we(o.transaction),e)})),n&&o.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),a.then((e=>{s&&e.addEventListener("close",(()=>s())),r&&e.addEventListener("versionchange",(e=>r(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),a}(gt,Ct,{upgrade:(e,t)=>{if(0===t)try{e.createObjectStore(yt)}catch(e){console.warn(e)}}}).catch((e=>{throw At.create("idb-open",{originalErrorMessage:e.message})}))),bt}async function vt(e,t){try{const n=(await Et()).transaction(yt,"readwrite"),i=n.objectStore(yt);await i.put(t,wt(e)),await n.done}catch(e){if(e instanceof U)Re.warn(e.message);else{const t=At.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});Re.warn(t.message)}}}function wt(e){return`${e.name}!${e.options.appId}`}class xt{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new It(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){var e,t;try{const n=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),i=kt();if(null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)&&(this._heartbeatsCache=await this._heartbeatsCachePromise,null==(null===(t=this._heartbeatsCache)||void 0===t?void 0:t.heartbeats)))return;if(this._heartbeatsCache.lastSentHeartbeatDate===i||this._heartbeatsCache.heartbeats.some((e=>e.date===i)))return;return this._heartbeatsCache.heartbeats.push({date:i,agent:n}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}catch(e){Re.warn(e)}}async getHeartbeatsHeader(){var e;try{if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length)return"";const t=kt(),{heartbeatsToSend:n,unsentEntries:i}=function(e,t=1024){const n=[];let i=e.slice();for(const r of e){const e=n.find((e=>e.agent===r.agent));if(e){if(e.dates.push(r.date),Bt(n)>t){e.dates.pop();break}}else if(n.push({agent:r.agent,dates:[r.date]}),Bt(n)>t){n.pop();break}i=i.slice(1)}return{heartbeatsToSend:n,unsentEntries:i}}(this._heartbeatsCache.heartbeats),r=D(JSON.stringify({version:2,heartbeats:n}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),r}catch(e){return Re.warn(e),""}}}function kt(){return(new Date).toISOString().substring(0,10)}class It{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(e){return!1}}()&&new Promise(((e,t)=>{try{let n=!0;const i="validate-browser-context-for-indexeddb-analytics-module",r=self.indexedDB.open(i);r.onsuccess=()=>{r.result.close(),n||self.indexedDB.deleteDatabase(i),e(!0)},r.onupgradeneeded=()=>{n=!1},r.onerror=()=>{var e;t((null===(e=r.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){try{const t=(await Et()).transaction(yt),n=await t.objectStore(yt).get(wt(e));return await t.done,n}catch(e){if(e instanceof U)Re.warn(e.message);else{const t=At.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});Re.warn(t.message)}}}(this.app);return(null==e?void 0:e.heartbeats)?e:{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return vt(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return vt(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Bt(e){return D(JSON.stringify({version:2,heartbeats:e})).length}pt(new ie("platform-logger",(e=>new Ne(e)),"PRIVATE")),pt(new ie("heartbeat",(e=>new xt(e)),"PRIVATE")),ft(Pe,De,""),ft(Pe,De,"esm2017"),ft("fire-js",""),ft("firebase","11.0.2","app");const Tt=mt({apiKey:"AIzaSyCGShHKbWgPSCOPVzoL8GvcP287Oyeczq0",authDomain:"travel-agency-javascript.firebaseapp.com",databaseURL:"https://travel-agency-javascript-default-rtdb.europe-west1.firebasedatabase.app/",projectId:"travel-agency-javascript",storageBucket:"travel-agency-javascript.firebasestorage.app",messagingSenderId:"628054712472",appId:"1:628054712472:web:a4a55f95cd8eedf02eb0ed"}),St="@firebase/database",Nt="1.0.10";let Pt="";class Dt{constructor(e){this.domStorage_=e,this.prefix_="firebase:"}set(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),$(t))}get(e){const t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:H(t)}remove(e){this.domStorage_.removeItem(this.prefixedName_(e))}prefixedName_(e){return this.prefix_+e}toString(){return this.domStorage_.toString()}}class Rt{constructor(){this.cache_={},this.isInMemoryStorage=!0}set(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t}get(e){return V(this.cache_,e)?this.cache_[e]:null}remove(e){delete this.cache_[e]}}const Ot=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){const t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new Dt(t)}}catch(e){}return new Rt},Mt=Ot("localStorage"),Lt=Ot("sessionStorage"),qt=new pe("@firebase/database"),Ft=function(){let e=1;return function(){return e++}}(),zt=function(e){const t=function(e){const t=[];let n=0;for(let i=0;i<e.length;i++){let r=e.charCodeAt(i);if(r>=55296&&r<=56319){const t=r-55296;i++,I(i<e.length,"Surrogate pair missing trail surrogate."),r=65536+(t<<10)+(e.charCodeAt(i)-56320)}r<128?t[n++]=r:r<2048?(t[n++]=r>>6|192,t[n++]=63&r|128):r<65536?(t[n++]=r>>12|224,t[n++]=r>>6&63|128,t[n++]=63&r|128):(t[n++]=r>>18|240,t[n++]=r>>12&63|128,t[n++]=r>>6&63|128,t[n++]=63&r|128)}return t}(e),n=new J;n.update(t);const i=n.digest();return S.encodeByteArray(i)},Ut=function(...e){let t="";for(let n=0;n<e.length;n++){const i=e[n];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?t+=Ut.apply(null,i):t+="object"==typeof i?$(i):i,t+=" "}return t};let Wt=null,jt=!0;const Ht=function(...e){if(!0===jt&&(jt=!1,null===Wt&&!0===Lt.get("logging_enabled")&&(t=!0,I(!n||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(qt.logLevel=le.VERBOSE,Wt=qt.log.bind(qt),n&&Lt.set("logging_enabled",!0)):"function"==typeof t?Wt=t:(Wt=null,Lt.remove("logging_enabled")))),Wt){const t=Ut.apply(null,e);Wt(t)}var t,n},$t=function(e){return function(...t){Ht(e,...t)}},Yt=function(...e){const t="FIREBASE INTERNAL ERROR: "+Ut(...e);qt.error(t)},Vt=function(...e){const t=`FIREBASE FATAL ERROR: ${Ut(...e)}`;throw qt.error(t),new Error(t)},Gt=function(...e){const t="FIREBASE WARNING: "+Ut(...e);qt.warn(t)},Kt=function(e){return"number"==typeof e&&(e!=e||e===Number.POSITIVE_INFINITY||e===Number.NEGATIVE_INFINITY)},Qt="[MIN_NAME]",Xt="[MAX_NAME]",Zt=function(e,t){if(e===t)return 0;if(e===Qt||t===Xt)return-1;if(t===Qt||e===Xt)return 1;{const n=an(e),i=an(t);return null!==n?null!==i?n-i==0?e.length-t.length:n-i:-1:null!==i?1:e<t?-1:1}},Jt=function(e,t){return e===t?0:e<t?-1:1},en=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+$(t))},tn=function(e){if("object"!=typeof e||null===e)return $(e);const t=[];for(const n in e)t.push(n);t.sort();let n="{";for(let i=0;i<t.length;i++)0!==i&&(n+=","),n+=$(t[i]),n+=":",n+=tn(e[t[i]]);return n+="}",n},nn=function(e,t){const n=e.length;if(n<=t)return[e];const i=[];for(let r=0;r<n;r+=t)r+t>n?i.push(e.substring(r,n)):i.push(e.substring(r,r+t));return i};function rn(e,t){for(const n in e)e.hasOwnProperty(n)&&t(n,e[n])}const sn=function(e){I(!Kt(e),"Invalid JSON number");let t,n,i,r,s;0===e?(n=0,i=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(r=Math.min(Math.floor(Math.log(e)/Math.LN2),1023),n=r+1023,i=Math.round(e*Math.pow(2,52-r)-Math.pow(2,52))):(n=0,i=Math.round(e/Math.pow(2,-1074))));const o=[];for(s=52;s;s-=1)o.push(i%2?1:0),i=Math.floor(i/2);for(s=11;s;s-=1)o.push(n%2?1:0),n=Math.floor(n/2);o.push(t?1:0),o.reverse();const a=o.join("");let l="";for(s=0;s<64;s+=8){let e=parseInt(a.substr(s,8),2).toString(16);1===e.length&&(e="0"+e),l+=e}return l.toLowerCase()},on=new RegExp("^-?(0*)\\d{1,10}$"),an=function(e){if(on.test(e)){const t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},ln=function(e){try{e()}catch(e){setTimeout((()=>{const t=e.stack||"";throw Gt("Exception was thrown by user callback.",t),e}),Math.floor(0))}},cn=function(e,t){const n=setTimeout(e,t);return"number"==typeof n&&"undefined"!=typeof Deno&&Deno.unrefTimer?Deno.unrefTimer(n):"object"==typeof n&&n.unref&&n.unref(),n};class hn{constructor(e,t){this.appName_=e,this.appCheckProvider=t,this.appCheck=null==t?void 0:t.getImmediate({optional:!0}),this.appCheck||null==t||t.get().then((e=>this.appCheck=e))}getToken(e){return this.appCheck?this.appCheck.getToken(e):new Promise(((t,n)=>{setTimeout((()=>{this.appCheck?this.getToken(e).then(t,n):t(null)}),0)}))}addTokenChangeListener(e){var t;null===(t=this.appCheckProvider)||void 0===t||t.get().then((t=>t.addTokenListener(e)))}notifyForInvalidToken(){Gt(`Provided AppCheck credentials for the app named "${this.appName_}" are invalid. This usually indicates your app was not initialized correctly.`)}}class dn{constructor(e,t,n){this.appName_=e,this.firebaseOptions_=t,this.authProvider_=n,this.auth_=null,this.auth_=n.getImmediate({optional:!0}),this.auth_||n.onInit((e=>this.auth_=e))}getToken(e){return this.auth_?this.auth_.getToken(e).catch((e=>e&&"auth/token-not-initialized"===e.code?(Ht("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e))):new Promise(((t,n)=>{setTimeout((()=>{this.auth_?this.getToken(e).then(t,n):t(null)}),0)}))}addTokenChangeListener(e){this.auth_?this.auth_.addAuthTokenListener(e):this.authProvider_.get().then((t=>t.addAuthTokenListener(e)))}removeTokenChangeListener(e){this.authProvider_.get().then((t=>t.removeAuthTokenListener(e)))}notifyForInvalidToken(){let e='Provided authentication credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.firebaseOptions_?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.firebaseOptions_?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',Gt(e)}}class un{constructor(e){this.accessToken=e}getToken(e){return Promise.resolve({accessToken:this.accessToken})}addTokenChangeListener(e){e(this.accessToken)}removeTokenChangeListener(e){}notifyForInvalidToken(){}}un.OWNER="owner";const pn="5",An=/(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/,_n="ac",mn="websocket",fn="long_polling";class gn{constructor(e,t,n,i,r=!1,s="",o=!1,a=!1){this.secure=t,this.namespace=n,this.webSocketOnly=i,this.nodeAdmin=r,this.persistenceKey=s,this.includeNamespaceInQueryParams=o,this.isUsingEmulator=a,this._host=e.toLowerCase(),this._domain=this._host.substr(this._host.indexOf(".")+1),this.internalHost=Mt.get("host:"+e)||this._host}isCacheableHost(){return"s-"===this.internalHost.substr(0,2)}isCustomHost(){return"firebaseio.com"!==this._domain&&"firebaseio-demo.com"!==this._domain}get host(){return this._host}set host(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&Mt.set("host:"+this._host,this.internalHost))}toString(){let e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e}toURLString(){const e=this.secure?"https://":"http://",t=this.includeNamespaceInQueryParams?`?ns=${this.namespace}`:"";return`${e}${this.host}/${t}`}}function Cn(e,t,n){let i;if(I("string"==typeof t,"typeof type must == string"),I("object"==typeof n,"typeof params must == object"),t===mn)i=(e.secure?"wss://":"ws://")+e.internalHost+"/.ws?";else{if(t!==fn)throw new Error("Unknown connection type: "+t);i=(e.secure?"https://":"http://")+e.internalHost+"/.lp?"}(function(e){return e.host!==e.internalHost||e.isCustomHost()||e.includeNamespaceInQueryParams})(e)&&(n.ns=e.namespace);const r=[];return rn(n,((e,t)=>{r.push(e+"="+t)})),i+r.join("&")}class yn{constructor(){this.counters_={}}incrementCounter(e,t=1){V(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t}get(){return O(this.counters_)}}const bn={},En={};function vn(e){const t=e.toString();return bn[t]||(bn[t]=new yn),bn[t]}class wn{constructor(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}closeAfter(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)}handleResponse(e,t){for(this.pendingResponses[e]=t;this.pendingResponses[this.currentResponseNum];){const e=this.pendingResponses[this.currentResponseNum];delete this.pendingResponses[this.currentResponseNum];for(let t=0;t<e.length;++t)e[t]&&ln((()=>{this.onMessage_(e[t])}));if(this.currentResponseNum===this.closeAfterResponse){this.onClose&&(this.onClose(),this.onClose=null);break}this.currentResponseNum++}}}const xn="start";class kn{constructor(e,t,n,i,r,s,o){this.connId=e,this.repoInfo=t,this.applicationId=n,this.appCheckToken=i,this.authToken=r,this.transportSessionId=s,this.lastSessionId=o,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=$t(e),this.stats_=vn(t),this.urlFn=e=>(this.appCheckToken&&(e[_n]=this.appCheckToken),Cn(t,fn,e))}open(e,t){this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new wn(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((()=>{this.log_("Timed out trying to connect."),this.onClosed_(),this.connectTimeoutTimer_=null}),Math.floor(3e4)),function(e){if("complete"===document.readyState)e();else{let t=!1;const n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(()=>{"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((()=>{if(this.isClosed_)return;this.scriptTagHolder=new In(((...e)=>{const[t,n,i,r,s]=e;if(this.incrementIncomingBytes_(e),this.scriptTagHolder)if(this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null),this.everConnected_=!0,t===xn)this.id=n,this.password=i;else{if("close"!==t)throw new Error("Unrecognized command received: "+t);n?(this.scriptTagHolder.sendNewPolls=!1,this.myPacketOrderer.closeAfter(n,(()=>{this.onClosed_()}))):this.onClosed_()}}),((...e)=>{const[t,n]=e;this.incrementIncomingBytes_(e),this.myPacketOrderer.handleResponse(t,n)}),(()=>{this.onClosed_()}),this.urlFn);const e={};e[xn]="t",e.ser=Math.floor(1e8*Math.random()),this.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=this.scriptTagHolder.uniqueCallbackIdentifier),e.v=pn,this.transportSessionId&&(e.s=this.transportSessionId),this.lastSessionId&&(e.ls=this.lastSessionId),this.applicationId&&(e.p=this.applicationId),this.appCheckToken&&(e[_n]=this.appCheckToken),"undefined"!=typeof location&&location.hostname&&An.test(location.hostname)&&(e.r="f");const t=this.urlFn(e);this.log_("Connecting via long-poll to "+t),this.scriptTagHolder.addTag(t,(()=>{}))}))}start(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)}static forceAllow(){kn.forceAllow_=!0}static forceDisallow(){kn.forceDisallow_=!0}static isAvailable(){return!(!kn.forceAllow_&&(kn.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))}markConnectionHealthy(){}shutdown_(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)}onClosed_(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))}close(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())}send(e){const t=$(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);const n=P(t),i=nn(n,1840);for(let e=0;e<i.length;e++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,i.length,i[e]),this.curSegmentNum++}addDisconnectPingFrame(e,t){this.myDisconnFrame=document.createElement("iframe");const n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}incrementIncomingBytes_(e){const t=$(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)}}class In{constructor(e,t,n,i){this.onDisconnect=n,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0;{this.uniqueCallbackIdentifier=Ft(),window["pLPCommand"+this.uniqueCallbackIdentifier]=e,window["pRTLPCB"+this.uniqueCallbackIdentifier]=t,this.myIFrame=In.createIFrame_();let n="";this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,11)&&(n='<script>document.domain="'+document.domain+'";<\/script>');const i="<html><body>"+n+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(i),this.myIFrame.doc.close()}catch(e){Ht("frame writing exception"),e.stack&&Ht(e.stack),Ht(e)}}}static createIFrame_(){const e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||Ht("No IE domain setting required")}catch(t){const n=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+n+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e}close(){this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.textContent="",setTimeout((()=>{null!==this.myIFrame&&(document.body.removeChild(this.myIFrame),this.myIFrame=null)}),Math.floor(0)));const e=this.onDisconnect;e&&(this.onDisconnect=null,e())}startLongPoll(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););}newRequest_(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;const e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;let t=this.urlFn(e),n="",i=0;for(;this.pendingSegs.length>0&&this.pendingSegs[0].d.length+30+n.length<=1870;){const e=this.pendingSegs.shift();n=n+"&seg"+i+"="+e.seg+"&ts"+i+"="+e.ts+"&d"+i+"="+e.d,i++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1}enqueueSegment(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()}addLongPollTag_(e,t){this.outstandingRequests.add(t);const n=()=>{this.outstandingRequests.delete(t),this.newRequest_()},i=setTimeout(n,Math.floor(25e3));this.addTag(e,(()=>{clearTimeout(i),n()}))}addTag(e,t){setTimeout((()=>{try{if(!this.sendNewPolls)return;const n=this.myIFrame.doc.createElement("script");n.type="text/javascript",n.async=!0,n.src=e,n.onload=n.onreadystatechange=function(){const e=n.readyState;e&&"loaded"!==e&&"complete"!==e||(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),t())},n.onerror=()=>{Ht("Long-poll script failed to load: "+e),this.sendNewPolls=!1,this.close()},this.myIFrame.doc.body.appendChild(n)}catch(e){}}),Math.floor(1))}}let Bn=null;"undefined"!=typeof MozWebSocket?Bn=MozWebSocket:"undefined"!=typeof WebSocket&&(Bn=WebSocket);class Tn{constructor(e,t,n,i,r,s,o){this.connId=e,this.applicationId=n,this.appCheckToken=i,this.authToken=r,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=$t(this.connId),this.stats_=vn(t),this.connURL=Tn.connectionURL_(t,s,o,i,n),this.nodeAdmin=t.nodeAdmin}static connectionURL_(e,t,n,i,r){const s={};return s.v=pn,"undefined"!=typeof location&&location.hostname&&An.test(location.hostname)&&(s.r="f"),t&&(s.s=t),n&&(s.ls=n),i&&(s[_n]=i),r&&(s.p=r),Cn(e,mn,s)}open(e,t){this.onDisconnect=t,this.onMessage=e,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,Mt.set("previous_websocket_failure",!0);try{let e;0,this.mySock=new Bn(this.connURL,[],e)}catch(e){this.log_("Error instantiating WebSocket.");const t=e.message||e.data;return t&&this.log_(t),void this.onClosed_()}this.mySock.onopen=()=>{this.log_("Websocket connected."),this.everConnected_=!0},this.mySock.onclose=()=>{this.log_("Websocket connection was disconnected."),this.mySock=null,this.onClosed_()},this.mySock.onmessage=e=>{this.handleIncomingFrame(e)},this.mySock.onerror=e=>{this.log_("WebSocket error.  Closing connection.");const t=e.message||e.data;t&&this.log_(t),this.onClosed_()}}start(){}static forceDisallow(){Tn.forceDisallow_=!0}static isAvailable(){let e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){const t=/Android ([0-9]{0,}\.[0-9]{0,})/,n=navigator.userAgent.match(t);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Bn&&!Tn.forceDisallow_}static previouslyFailed(){return Mt.isInMemoryStorage||!0===Mt.get("previous_websocket_failure")}markConnectionHealthy(){Mt.remove("previous_websocket_failure")}appendFrame_(e){if(this.frames.push(e),this.frames.length===this.totalFrames){const e=this.frames.join("");this.frames=null;const t=H(e);this.onMessage(t)}}handleNewFrameCount_(e){this.totalFrames=e,this.frames=[]}extractFrameCount_(e){if(I(null===this.frames,"We already have a frame buffer"),e.length<=6){const t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e}handleIncomingFrame(e){if(null===this.mySock)return;const t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{const e=this.extractFrameCount_(t);null!==e&&this.appendFrame_(e)}}send(e){this.resetKeepAlive();const t=$(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);const n=nn(t,16384);n.length>1&&this.sendString_(String(n.length));for(let e=0;e<n.length;e++)this.sendString_(n[e])}shutdown_(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)}onClosed_(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))}close(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())}resetKeepAlive(){clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((()=>{this.mySock&&this.sendString_("0"),this.resetKeepAlive()}),Math.floor(45e3))}sendString_(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}}}Tn.responsesRequiredToBeHealthy=2,Tn.healthyTimeout=3e4;class Sn{static get ALL_TRANSPORTS(){return[kn,Tn]}static get IS_TRANSPORT_INITIALIZED(){return this.globalTransportInitialized_}constructor(e){this.initTransports_(e)}initTransports_(e){const t=Tn&&Tn.isAvailable();let n=t&&!Tn.previouslyFailed();if(e.webSocketOnly&&(t||Gt("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),n=!0),n)this.transports_=[Tn];else{const e=this.transports_=[];for(const t of Sn.ALL_TRANSPORTS)t&&t.isAvailable()&&e.push(t);Sn.globalTransportInitialized_=!0}}initialTransport(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")}upgradeTransport(){return this.transports_.length>1?this.transports_[1]:null}}Sn.globalTransportInitialized_=!1;class Nn{constructor(e,t,n,i,r,s,o,a,l,c){this.id=e,this.repoInfo_=t,this.applicationId_=n,this.appCheckToken_=i,this.authToken_=r,this.onMessage_=s,this.onReady_=o,this.onDisconnect_=a,this.onKill_=l,this.lastSessionId=c,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=$t("c:"+this.id+":"),this.transportManager_=new Sn(t),this.log_("Connection created"),this.start_()}start_(){const e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,null,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;const t=this.connReceiver_(this.conn_),n=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((()=>{this.conn_&&this.conn_.open(t,n)}),Math.floor(0));const i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=cn((()=>{this.healthyTimeout_=null,this.isHealthy_||(this.conn_&&this.conn_.bytesReceived>102400?(this.log_("Connection exceeded healthy timeout but has received "+this.conn_.bytesReceived+" bytes.  Marking connection healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()):this.conn_&&this.conn_.bytesSent>10240?this.log_("Connection exceeded healthy timeout but has sent "+this.conn_.bytesSent+" bytes.  Leaving connection alive."):(this.log_("Closing unhealthy connection after timeout."),this.close()))}),Math.floor(i)))}nextTransportId_(){return"c:"+this.id+":"+this.connectionCount++}disconnReceiver_(e){return t=>{e===this.conn_?this.onConnectionLost_(t):e===this.secondaryConn_?(this.log_("Secondary connection lost."),this.onSecondaryConnectionLost_()):this.log_("closing an old connection")}}connReceiver_(e){return t=>{2!==this.state_&&(e===this.rx_?this.onPrimaryMessageReceived_(t):e===this.secondaryConn_?this.onSecondaryMessageReceived_(t):this.log_("message on old connection"))}}sendRequest(e){const t={t:"d",d:e};this.sendData_(t)}tryCleanupConnection(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)}onSecondaryControl_(e){if("t"in e){const t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}}onSecondaryMessageReceived_(e){const t=en("t",e),n=en("d",e);if("c"===t)this.onSecondaryControl_(n);else{if("d"!==t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}}upgradeIfSecondaryHealthy_(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))}proceedWithUpgrade_(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()}onPrimaryMessageReceived_(e){const t=en("t",e),n=en("d",e);"c"===t?this.onControl_(n):"d"===t&&this.onDataMessage_(n)}onDataMessage_(e){this.onPrimaryResponse_(),this.onMessage_(e)}onPrimaryResponse_(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))}onControl_(e){const t=en("t",e);if("d"in e){const n=e.d;if("h"===t){const e=Object.assign({},n);this.repoInfo_.isUsingEmulator&&(e.h=this.repoInfo_.host),this.onHandshake_(e)}else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(let e=0;e<this.pendingDataMessages.length;++e)this.onDataMessage_(this.pendingDataMessages[e]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?Yt("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):Yt("Unknown control packet command: "+t)}}onHandshake_(e){const t=e.ts,n=e.v,i=e.h;this.sessionId=e.s,this.repoInfo_.host=i,0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),pn!==n&&Gt("Protocol version mismatch detected"),this.tryStartUpgrade_())}tryStartUpgrade_(){const e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)}startUpgrade_(e){this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;const t=this.connReceiver_(this.secondaryConn_),n=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(t,n),cn((()=>{this.secondaryConn_&&(this.log_("Timed out trying to upgrade."),this.secondaryConn_.close())}),Math.floor(6e4))}onReset_(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.host=e,1===this.state_?this.close():(this.closeConnections_(),this.start_())}onConnectionEstablished_(e,t){this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):cn((()=>{this.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))}sendPingOnPrimaryIfNecessary_(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))}onSecondaryConnectionLost_(){const e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()}onConnectionLost_(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(Mt.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()}onConnectionShutdown_(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()}sendData_(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)}close(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))}closeConnections_(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)}}class Pn{put(e,t,n,i){}merge(e,t,n,i){}refreshAuthToken(e){}refreshAppCheckToken(e){}onDisconnectPut(e,t,n){}onDisconnectMerge(e,t,n){}onDisconnectCancel(e,t){}reportStats(e){}}class Dn{constructor(e){this.allowedEvents_=e,this.listeners_={},I(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}trigger(e,...t){if(Array.isArray(this.listeners_[e])){const n=[...this.listeners_[e]];for(let e=0;e<n.length;e++)n[e].callback.apply(n[e].context,t)}}on(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});const i=this.getInitialEvent(e);i&&t.apply(n,i)}off(e,t,n){this.validateEventType_(e);const i=this.listeners_[e]||[];for(let e=0;e<i.length;e++)if(i[e].callback===t&&(!n||n===i[e].context))return void i.splice(e,1)}validateEventType_(e){I(this.allowedEvents_.find((t=>t===e)),"Unknown event: "+e)}}class Rn extends Dn{static getInstance(){return new Rn}constructor(){super(["online"]),this.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||z()||(window.addEventListener("online",(()=>{this.online_||(this.online_=!0,this.trigger("online",!0))}),!1),window.addEventListener("offline",(()=>{this.online_&&(this.online_=!1,this.trigger("online",!1))}),!1))}getInitialEvent(e){return I("online"===e,"Unknown event type: "+e),[this.online_]}currentlyOnline(){return this.online_}}class On{constructor(e,t){if(void 0===t){this.pieces_=e.split("/");let t=0;for(let e=0;e<this.pieces_.length;e++)this.pieces_[e].length>0&&(this.pieces_[t]=this.pieces_[e],t++);this.pieces_.length=t,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}toString(){let e="";for(let t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"}}function Mn(){return new On("")}function Ln(e){return e.pieceNum_>=e.pieces_.length?null:e.pieces_[e.pieceNum_]}function qn(e){return e.pieces_.length-e.pieceNum_}function Fn(e){let t=e.pieceNum_;return t<e.pieces_.length&&t++,new On(e.pieces_,t)}function zn(e){return e.pieceNum_<e.pieces_.length?e.pieces_[e.pieces_.length-1]:null}function Un(e,t=0){return e.pieces_.slice(e.pieceNum_+t)}function Wn(e){if(e.pieceNum_>=e.pieces_.length)return null;const t=[];for(let n=e.pieceNum_;n<e.pieces_.length-1;n++)t.push(e.pieces_[n]);return new On(t,0)}function jn(e,t){const n=[];for(let t=e.pieceNum_;t<e.pieces_.length;t++)n.push(e.pieces_[t]);if(t instanceof On)for(let e=t.pieceNum_;e<t.pieces_.length;e++)n.push(t.pieces_[e]);else{const e=t.split("/");for(let t=0;t<e.length;t++)e[t].length>0&&n.push(e[t])}return new On(n,0)}function Hn(e){return e.pieceNum_>=e.pieces_.length}function $n(e,t){const n=Ln(e),i=Ln(t);if(null===n)return t;if(n===i)return $n(Fn(e),Fn(t));throw new Error("INTERNAL ERROR: innerPath ("+t+") is not within outerPath ("+e+")")}function Yn(e,t){if(qn(e)!==qn(t))return!1;for(let n=e.pieceNum_,i=t.pieceNum_;n<=e.pieces_.length;n++,i++)if(e.pieces_[n]!==t.pieces_[i])return!1;return!0}function Vn(e,t){let n=e.pieceNum_,i=t.pieceNum_;if(qn(e)>qn(t))return!1;for(;n<e.pieces_.length;){if(e.pieces_[n]!==t.pieces_[i])return!1;++n,++i}return!0}class Gn{constructor(e,t){this.errorPrefix_=t,this.parts_=Un(e,0),this.byteLength_=Math.max(1,this.parts_.length);for(let e=0;e<this.parts_.length;e++)this.byteLength_+=te(this.parts_[e]);Kn(this)}}function Kn(e){if(e.byteLength_>768)throw new Error(e.errorPrefix_+"has a key path longer than 768 bytes ("+e.byteLength_+").");if(e.parts_.length>32)throw new Error(e.errorPrefix_+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Qn(e))}function Qn(e){return 0===e.parts_.length?"":"in property '"+e.parts_.join(".")+"'"}class Xn extends Dn{static getInstance(){return new Xn}constructor(){let e,t;super(["visible"]),"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(t="visibilitychange",e="hidden"):void 0!==document.mozHidden?(t="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(t="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(t="webkitvisibilitychange",e="webkitHidden")),this.visible_=!0,t&&document.addEventListener(t,(()=>{const t=!document[e];t!==this.visible_&&(this.visible_=t,this.trigger("visible",t))}),!1)}getInitialEvent(e){return I("visible"===e,"Unknown event type: "+e),[this.visible_]}}const Zn=1e3;class Jn extends Pn{constructor(e,t,n,i,r,s,o,a){if(super(),this.repoInfo_=e,this.applicationId_=t,this.onDataUpdate_=n,this.onConnectStatus_=i,this.onServerInfoUpdate_=r,this.authTokenProvider_=s,this.appCheckTokenProvider_=o,this.authOverride_=a,this.id=Jn.nextPersistentConnectionId_++,this.log_=$t("p:"+this.id+":"),this.interruptReasons_={},this.listens=new Map,this.outstandingPuts_=[],this.outstandingGets_=[],this.outstandingPutCount_=0,this.outstandingGetCount_=0,this.onDisconnectRequestQueue_=[],this.connected_=!1,this.reconnectDelay_=Zn,this.maxReconnectDelay_=3e5,this.securityDebugCallback_=null,this.lastSessionId=null,this.establishConnectionTimer_=null,this.visible_=!1,this.requestCBHash_={},this.requestNumber_=0,this.realtime_=null,this.authToken_=null,this.appCheckToken_=null,this.forceTokenRefresh_=!1,this.invalidAuthTokenCount_=0,this.invalidAppCheckTokenCount_=0,this.firstConnection_=!0,this.lastConnectionAttemptTime_=null,this.lastConnectionEstablishedTime_=null,a)throw new Error("Auth override specified in options, but not supported on non Node.js platforms");Xn.getInstance().on("visible",this.onVisible_,this),-1===e.host.indexOf("fblocal")&&Rn.getInstance().on("online",this.onOnline_,this)}sendRequest(e,t,n){const i=++this.requestNumber_,r={r:i,a:e,b:t};this.log_($(r)),I(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(r),n&&(this.requestCBHash_[i]=n)}get(e){this.initConnection_();const t=new F,n={action:"g",request:{p:e._path.toString(),q:e._queryObject},onComplete:e=>{const n=e.d;"ok"===e.s?t.resolve(n):t.reject(n)}};this.outstandingGets_.push(n),this.outstandingGetCount_++;const i=this.outstandingGets_.length-1;return this.connected_&&this.sendGet_(i),t.promise}listen(e,t,n,i){this.initConnection_();const r=e._queryIdentifier,s=e._path.toString();this.log_("Listen called for "+s+" "+r),this.listens.has(s)||this.listens.set(s,new Map),I(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"listen() called for non-default but complete query"),I(!this.listens.get(s).has(r),"listen() called twice for same path/queryId.");const o={onComplete:i,hashFn:t,query:e,tag:n};this.listens.get(s).set(r,o),this.connected_&&this.sendListen_(o)}sendGet_(e){const t=this.outstandingGets_[e];this.sendRequest("g",t.request,(n=>{delete this.outstandingGets_[e],this.outstandingGetCount_--,0===this.outstandingGetCount_&&(this.outstandingGets_=[]),t.onComplete&&t.onComplete(n)}))}sendListen_(e){const t=e.query,n=t._path.toString(),i=t._queryIdentifier;this.log_("Listen on "+n+" for "+i);const r={p:n};e.tag&&(r.q=t._queryObject,r.t=e.tag),r.h=e.hashFn(),this.sendRequest("q",r,(r=>{const s=r.d,o=r.s;Jn.warnOnListenWarnings_(s,t),(this.listens.get(n)&&this.listens.get(n).get(i))===e&&(this.log_("listen response",r),"ok"!==o&&this.removeListen_(n,i),e.onComplete&&e.onComplete(o,s))}))}static warnOnListenWarnings_(e,t){if(e&&"object"==typeof e&&V(e,"w")){const n=G(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){const e='".indexOn": "'+t._queryParams.getIndex().toString()+'"',n=t._path.toString();Gt(`Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding ${e} at ${n} to your security rules for better performance.`)}}}refreshAuthToken(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(()=>{})),this.reduceReconnectDelayIfAdminCredential_(e)}reduceReconnectDelayIfAdminCredential_(e){(e&&40===e.length||function(e){const t=Y(e).claims;return"object"==typeof t&&!0===t.admin}(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)}refreshAppCheckToken(e){this.appCheckToken_=e,this.log_("App check token refreshed"),this.appCheckToken_?this.tryAppCheck():this.connected_&&this.sendRequest("unappeck",{},(()=>{}))}tryAuth(){if(this.connected_&&this.authToken_){const e=this.authToken_,t=function(e){const t=Y(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")}(e)?"auth":"gauth",n={cred:e};null===this.authOverride_?n.noauth=!0:"object"==typeof this.authOverride_&&(n.authvar=this.authOverride_),this.sendRequest(t,n,(t=>{const n=t.s,i=t.d||"error";this.authToken_===e&&("ok"===n?this.invalidAuthTokenCount_=0:this.onAuthRevoked_(n,i))}))}}tryAppCheck(){this.connected_&&this.appCheckToken_&&this.sendRequest("appcheck",{token:this.appCheckToken_},(e=>{const t=e.s,n=e.d||"error";"ok"===t?this.invalidAppCheckTokenCount_=0:this.onAppCheckRevoked_(t,n)}))}unlisten(e,t){const n=e._path.toString(),i=e._queryIdentifier;this.log_("Unlisten called for "+n+" "+i),I(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,i)&&this.connected_&&this.sendUnlisten_(n,i,e._queryObject,t)}sendUnlisten_(e,t,n,i){this.log_("Unlisten on "+e+" for "+t);const r={p:e};i&&(r.q=n,r.t=i),this.sendRequest("n",r)}onDisconnectPut(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})}onDisconnectMerge(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})}onDisconnectCancel(e,t){this.initConnection_(),this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})}sendOnDisconnect_(e,t,n,i){const r={p:t,d:n};this.log_("onDisconnect "+e,r),this.sendRequest(e,r,(e=>{i&&setTimeout((()=>{i(e.s,e.d)}),Math.floor(0))}))}put(e,t,n,i){this.putInternal("p",e,t,n,i)}merge(e,t,n,i){this.putInternal("m",e,t,n,i)}putInternal(e,t,n,i,r){this.initConnection_();const s={p:t,d:n};void 0!==r&&(s.h=r),this.outstandingPuts_.push({action:e,request:s,onComplete:i}),this.outstandingPutCount_++;const o=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(o):this.log_("Buffering put: "+t)}sendPut_(e){const t=this.outstandingPuts_[e].action,n=this.outstandingPuts_[e].request,i=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(t,n,(n=>{this.log_(t+" response",n),delete this.outstandingPuts_[e],this.outstandingPutCount_--,0===this.outstandingPutCount_&&(this.outstandingPuts_=[]),i&&i(n.s,n.d)}))}reportStats(e){if(this.connected_){const t={c:e};this.log_("reportStats",t),this.sendRequest("s",t,(e=>{if("ok"!==e.s){const t=e.d;this.log_("reportStats","Error sending stats: "+t)}}))}}onDataMessage_(e){if("r"in e){this.log_("from server: "+$(e));const t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}}onDataPush_(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"apc"===e?this.onAppCheckRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):Yt("Unrecognized action received from server: "+$(e)+"\nAre you using the latest client?")}onReady_(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)}scheduleConnect_(e){I(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((()=>{this.establishConnectionTimer_=null,this.establishConnection_()}),Math.floor(e))}initConnection_(){!this.realtime_&&this.firstConnection_&&this.scheduleConnect_(0)}onVisible_(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=Zn,this.realtime_||this.scheduleConnect_(0)),this.visible_=e}onOnline_(e){e?(this.log_("Browser went online."),this.reconnectDelay_=Zn,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())}onRealtimeDisconnect_(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){this.visible_?this.lastConnectionEstablishedTime_&&((new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=Zn),this.lastConnectionEstablishedTime_=null):(this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime());const e=(new Date).getTime()-this.lastConnectionAttemptTime_;let t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)}async establishConnection_(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;const e=this.onDataMessage_.bind(this),t=this.onReady_.bind(this),n=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+Jn.nextConnectionId_++,r=this.lastSessionId;let s=!1,o=null;const a=function(){o?o.close():(s=!0,n())},l=function(e){I(o,"sendRequest call when we're not connected not allowed."),o.sendRequest(e)};this.realtime_={close:a,sendRequest:l};const c=this.forceTokenRefresh_;this.forceTokenRefresh_=!1;try{const[a,l]=await Promise.all([this.authTokenProvider_.getToken(c),this.appCheckTokenProvider_.getToken(c)]);s?Ht("getToken() completed but was canceled"):(Ht("getToken() completed. Creating connection."),this.authToken_=a&&a.accessToken,this.appCheckToken_=l&&l.token,o=new Nn(i,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,e,t,n,(e=>{Gt(e+" ("+this.repoInfo_.toString()+")"),this.interrupt("server_kill")}),r))}catch(e){this.log_("Failed to get token: "+e),s||(this.repoInfo_.nodeAdmin&&Gt(e),a())}}}interrupt(e){Ht("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())}resume(e){Ht("Resuming connection for reason: "+e),delete this.interruptReasons_[e],K(this.interruptReasons_)&&(this.reconnectDelay_=Zn,this.realtime_||this.scheduleConnect_(0))}handleTimestamp_(e){const t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})}cancelSentTransactions_(){for(let e=0;e<this.outstandingPuts_.length;e++){const t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])}onListenRevoked_(e,t){let n;n=t?t.map((e=>tn(e))).join("$"):"default";const i=this.removeListen_(e,n);i&&i.onComplete&&i.onComplete("permission_denied")}removeListen_(e,t){const n=new On(e).toString();let i;if(this.listens.has(n)){const e=this.listens.get(n);i=e.get(t),e.delete(t),0===e.size&&this.listens.delete(n)}else i=void 0;return i}onAuthRevoked_(e,t){Ht("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))}onAppCheckRevoked_(e,t){Ht("App check token revoked: "+e+"/"+t),this.appCheckToken_=null,this.forceTokenRefresh_=!0,"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAppCheckTokenCount_++,this.invalidAppCheckTokenCount_>=3&&this.appCheckTokenProvider_.notifyForInvalidToken())}onSecurityDebugPacket_(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))}restoreState_(){this.tryAuth(),this.tryAppCheck();for(const e of this.listens.values())for(const t of e.values())this.sendListen_(t);for(let e=0;e<this.outstandingPuts_.length;e++)this.outstandingPuts_[e]&&this.sendPut_(e);for(;this.onDisconnectRequestQueue_.length;){const e=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(e.action,e.pathString,e.data,e.onComplete)}for(let e=0;e<this.outstandingGets_.length;e++)this.outstandingGets_[e]&&this.sendGet_(e)}sendConnectStats_(){const e={};let t="js";e["sdk."+t+"."+Pt.replace(/\./g,"-")]=1,z()?e["framework.cordova"]=1:"object"==typeof navigator&&"ReactNative"===navigator.product&&(e["framework.reactnative"]=1),this.reportStats(e)}shouldReconnect_(){const e=Rn.getInstance().currentlyOnline();return K(this.interruptReasons_)&&e}}Jn.nextPersistentConnectionId_=0,Jn.nextConnectionId_=0;class ei{constructor(e,t){this.name=e,this.node=t}static Wrap(e,t){return new ei(e,t)}}class ti{getCompare(){return this.compare.bind(this)}indexedValueChanged(e,t){const n=new ei(Qt,e),i=new ei(Qt,t);return 0!==this.compare(n,i)}minPost(){return ei.MIN}}let ni;class ii extends ti{static get __EMPTY_NODE(){return ni}static set __EMPTY_NODE(e){ni=e}compare(e,t){return Zt(e.name,t.name)}isDefinedOn(e){throw B("KeyIndex.isDefinedOn not expected to be called.")}indexedValueChanged(e,t){return!1}minPost(){return ei.MIN}maxPost(){return new ei(Xt,ni)}makePost(e,t){return I("string"==typeof e,"KeyIndex indexValue must always be a string."),new ei(e,ni)}toString(){return".key"}}const ri=new ii;class si{constructor(e,t,n,i,r=null){this.isReverse_=i,this.resultGenerator_=r,this.nodeStack_=[];let s=1;for(;!e.isEmpty();)if(s=t?n(e.key,t):1,i&&(s*=-1),s<0)e=this.isReverse_?e.left:e.right;else{if(0===s){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}getNext(){if(0===this.nodeStack_.length)return null;let e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e}hasNext(){return this.nodeStack_.length>0}peek(){if(0===this.nodeStack_.length)return null;const e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}}}class oi{constructor(e,t,n,i,r){this.key=e,this.value=t,this.color=null!=n?n:oi.RED,this.left=null!=i?i:ai.EMPTY_NODE,this.right=null!=r?r:ai.EMPTY_NODE}copy(e,t,n,i,r){return new oi(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=r?r:this.right)}count(){return this.left.count()+1+this.right.count()}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||!!e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min_(){return this.left.isEmpty()?this:this.left.min_()}minKey(){return this.min_().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let i=this;const r=n(e,i.key);return i=r<0?i.copy(null,null,null,i.left.insert(e,t,n),null):0===r?i.copy(null,t,null,null,null):i.copy(null,null,null,null,i.right.insert(e,t,n)),i.fixUp_()}removeMin_(){if(this.left.isEmpty())return ai.EMPTY_NODE;let e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),e=e.copy(null,null,null,e.left.removeMin_(),null),e.fixUp_()}remove(e,t){let n,i;if(n=this,t(e,n.key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return ai.EMPTY_NODE;i=n.right.min_(),n=n.copy(i.key,i.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()}isRed_(){return this.color}fixUp_(){let e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e}moveRedLeft_(){let e=this.colorFlip_();return e.right.left.isRed_()&&(e=e.copy(null,null,null,null,e.right.rotateRight_()),e=e.rotateLeft_(),e=e.colorFlip_()),e}moveRedRight_(){let e=this.colorFlip_();return e.left.left.isRed_()&&(e=e.rotateRight_(),e=e.colorFlip_()),e}rotateLeft_(){const e=this.copy(null,null,oi.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight_(){const e=this.copy(null,null,oi.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip_(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth_(){const e=this.check_();return Math.pow(2,e)<=this.count()+1}check_(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");const e=this.left.check_();if(e!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)}}oi.RED=!0,oi.BLACK=!1;class ai{constructor(e,t=ai.EMPTY_NODE){this.comparator_=e,this.root_=t}insert(e,t){return new ai(this.comparator_,this.root_.insert(e,t,this.comparator_).copy(null,null,oi.BLACK,null,null))}remove(e){return new ai(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,oi.BLACK,null,null))}get(e){let t,n=this.root_;for(;!n.isEmpty();){if(t=this.comparator_(e,n.key),0===t)return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null}getPredecessorKey(e){let t,n=this.root_,i=null;for(;!n.isEmpty();){if(t=this.comparator_(e,n.key),0===t){if(n.left.isEmpty())return i?i.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(i=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")}isEmpty(){return this.root_.isEmpty()}count(){return this.root_.count()}minKey(){return this.root_.minKey()}maxKey(){return this.root_.maxKey()}inorderTraversal(e){return this.root_.inorderTraversal(e)}reverseTraversal(e){return this.root_.reverseTraversal(e)}getIterator(e){return new si(this.root_,null,this.comparator_,!1,e)}getIteratorFrom(e,t){return new si(this.root_,e,this.comparator_,!1,t)}getReverseIteratorFrom(e,t){return new si(this.root_,e,this.comparator_,!0,t)}getReverseIterator(e){return new si(this.root_,null,this.comparator_,!0,e)}}function li(e,t){return Zt(e.name,t.name)}function ci(e,t){return Zt(e,t)}let hi;ai.EMPTY_NODE=new class{copy(e,t,n,i,r){return this}insert(e,t,n){return new oi(e,t,null)}remove(e,t){return this}count(){return 0}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}check_(){return 0}isRed_(){return!1}};const di=function(e){return"number"==typeof e?"number:"+sn(e):"string:"+e},ui=function(e){if(e.isLeafNode()){const t=e.val();I("string"==typeof t||"number"==typeof t||"object"==typeof t&&V(t,".sv"),"Priority must be a string or number.")}else I(e===hi||e.isEmpty(),"priority of unexpected type.");I(e===hi||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")};let pi,Ai,_i;class mi{static set __childrenNodeConstructor(e){pi=e}static get __childrenNodeConstructor(){return pi}constructor(e,t=mi.__childrenNodeConstructor.EMPTY_NODE){this.value_=e,this.priorityNode_=t,this.lazyHash_=null,I(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),ui(this.priorityNode_)}isLeafNode(){return!0}getPriority(){return this.priorityNode_}updatePriority(e){return new mi(this.value_,e)}getImmediateChild(e){return".priority"===e?this.priorityNode_:mi.__childrenNodeConstructor.EMPTY_NODE}getChild(e){return Hn(e)?this:".priority"===Ln(e)?this.priorityNode_:mi.__childrenNodeConstructor.EMPTY_NODE}hasChild(){return!1}getPredecessorChildName(e,t){return null}updateImmediateChild(e,t){return".priority"===e?this.updatePriority(t):t.isEmpty()&&".priority"!==e?this:mi.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,t).updatePriority(this.priorityNode_)}updateChild(e,t){const n=Ln(e);return null===n?t:t.isEmpty()&&".priority"!==n?this:(I(".priority"!==n||1===qn(e),".priority must be the last token in a path"),this.updateImmediateChild(n,mi.__childrenNodeConstructor.EMPTY_NODE.updateChild(Fn(e),t)))}isEmpty(){return!1}numChildren(){return 0}forEachChild(e,t){return!1}val(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()}hash(){if(null===this.lazyHash_){let e="";this.priorityNode_.isEmpty()||(e+="priority:"+di(this.priorityNode_.val())+":");const t=typeof this.value_;e+=t+":",e+="number"===t?sn(this.value_):this.value_,this.lazyHash_=zt(e)}return this.lazyHash_}getValue(){return this.value_}compareTo(e){return e===mi.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof mi.__childrenNodeConstructor?-1:(I(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))}compareToLeafNode_(e){const t=typeof e.value_,n=typeof this.value_,i=mi.VALUE_TYPE_ORDER.indexOf(t),r=mi.VALUE_TYPE_ORDER.indexOf(n);return I(i>=0,"Unknown leaf type: "+t),I(r>=0,"Unknown leaf type: "+n),i===r?"object"===n?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:r-i}withIndex(){return this}isIndexed(){return!0}equals(e){if(e===this)return!0;if(e.isLeafNode()){const t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1}}mi.VALUE_TYPE_ORDER=["object","boolean","number","string"];const fi=new class extends ti{compare(e,t){const n=e.node.getPriority(),i=t.node.getPriority(),r=n.compareTo(i);return 0===r?Zt(e.name,t.name):r}isDefinedOn(e){return!e.getPriority().isEmpty()}indexedValueChanged(e,t){return!e.getPriority().equals(t.getPriority())}minPost(){return ei.MIN}maxPost(){return new ei(Xt,new mi("[PRIORITY-POST]",_i))}makePost(e,t){const n=Ai(e);return new ei(t,new mi("[PRIORITY-POST]",n))}toString(){return".priority"}},gi=Math.log(2);class Ci{constructor(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/gi,10)),this.current_=this.count-1;const n=(i=this.count,parseInt(Array(i+1).join("1"),2));var i;this.bits_=e+1&n}nextBitIsOne(){const e=!(this.bits_&1<<this.current_);return this.current_--,e}}const yi=function(e,t,n,i){e.sort(t);const r=function(t,i){const s=i-t;let o,a;if(0===s)return null;if(1===s)return o=e[t],a=n?n(o):o,new oi(a,o.node,oi.BLACK,null,null);{const l=parseInt(s/2,10)+t,c=r(t,l),h=r(l+1,i);return o=e[l],a=n?n(o):o,new oi(a,o.node,oi.BLACK,c,h)}},s=function(t){let i=null,s=null,o=e.length;const a=function(t,i){const s=o-t,a=o;o-=t;const c=r(s+1,a),h=e[s],d=n?n(h):h;l(new oi(d,h.node,i,null,c))},l=function(e){i?(i.left=e,i=e):(s=e,i=e)};for(let e=0;e<t.count;++e){const n=t.nextBitIsOne(),i=Math.pow(2,t.count-(e+1));n?a(i,oi.BLACK):(a(i,oi.BLACK),a(i,oi.RED))}return s}(new Ci(e.length));return new ai(i||t,s)};let bi;const Ei={};class vi{static get Default(){return I(Ei&&fi,"ChildrenNode.ts has not been loaded"),bi=bi||new vi({".priority":Ei},{".priority":fi}),bi}constructor(e,t){this.indexes_=e,this.indexSet_=t}get(e){const t=G(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t instanceof ai?t:null}hasIndex(e){return V(this.indexSet_,e.toString())}addIndex(e,t){I(e!==ri,"KeyIndex always exists and isn't meant to be added to the IndexMap.");const n=[];let i=!1;const r=t.getIterator(ei.Wrap);let s,o=r.getNext();for(;o;)i=i||e.isDefinedOn(o.node),n.push(o),o=r.getNext();s=i?yi(n,e.getCompare()):Ei;const a=e.toString(),l=Object.assign({},this.indexSet_);l[a]=e;const c=Object.assign({},this.indexes_);return c[a]=s,new vi(c,l)}addToIndexes(e,t){const n=Q(this.indexes_,((n,i)=>{const r=G(this.indexSet_,i);if(I(r,"Missing index implementation for "+i),n===Ei){if(r.isDefinedOn(e.node)){const n=[],i=t.getIterator(ei.Wrap);let s=i.getNext();for(;s;)s.name!==e.name&&n.push(s),s=i.getNext();return n.push(e),yi(n,r.getCompare())}return Ei}{const i=t.get(e.name);let r=n;return i&&(r=r.remove(new ei(e.name,i))),r.insert(e,e.node)}}));return new vi(n,this.indexSet_)}removeFromIndexes(e,t){const n=Q(this.indexes_,(n=>{if(n===Ei)return n;{const i=t.get(e.name);return i?n.remove(new ei(e.name,i)):n}}));return new vi(n,this.indexSet_)}}let wi;class xi{static get EMPTY_NODE(){return wi||(wi=new xi(new ai(ci),null,vi.Default))}constructor(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&ui(this.priorityNode_),this.children_.isEmpty()&&I(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}isLeafNode(){return!1}getPriority(){return this.priorityNode_||wi}updatePriority(e){return this.children_.isEmpty()?this:new xi(this.children_,e,this.indexMap_)}getImmediateChild(e){if(".priority"===e)return this.getPriority();{const t=this.children_.get(e);return null===t?wi:t}}getChild(e){const t=Ln(e);return null===t?this:this.getImmediateChild(t).getChild(Fn(e))}hasChild(e){return null!==this.children_.get(e)}updateImmediateChild(e,t){if(I(t,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(t);{const n=new ei(e,t);let i,r;t.isEmpty()?(i=this.children_.remove(e),r=this.indexMap_.removeFromIndexes(n,this.children_)):(i=this.children_.insert(e,t),r=this.indexMap_.addToIndexes(n,this.children_));const s=i.isEmpty()?wi:this.priorityNode_;return new xi(i,s,r)}}updateChild(e,t){const n=Ln(e);if(null===n)return t;{I(".priority"!==Ln(e)||1===qn(e),".priority must be the last token in a path");const i=this.getImmediateChild(n).updateChild(Fn(e),t);return this.updateImmediateChild(n,i)}}isEmpty(){return this.children_.isEmpty()}numChildren(){return this.children_.count()}val(e){if(this.isEmpty())return null;const t={};let n=0,i=0,r=!0;if(this.forEachChild(fi,((s,o)=>{t[s]=o.val(e),n++,r&&xi.INTEGER_REGEXP_.test(s)?i=Math.max(i,Number(s)):r=!1})),!e&&r&&i<2*n){const e=[];for(const n in t)e[n]=t[n];return e}return e&&!this.getPriority().isEmpty()&&(t[".priority"]=this.getPriority().val()),t}hash(){if(null===this.lazyHash_){let e="";this.getPriority().isEmpty()||(e+="priority:"+di(this.getPriority().val())+":"),this.forEachChild(fi,((t,n)=>{const i=n.hash();""!==i&&(e+=":"+t+":"+i)})),this.lazyHash_=""===e?"":zt(e)}return this.lazyHash_}getPredecessorChildName(e,t,n){const i=this.resolveIndex_(n);if(i){const n=i.getPredecessorKey(new ei(e,t));return n?n.name:null}return this.children_.getPredecessorKey(e)}getFirstChildName(e){const t=this.resolveIndex_(e);if(t){const e=t.minKey();return e&&e.name}return this.children_.minKey()}getFirstChild(e){const t=this.getFirstChildName(e);return t?new ei(t,this.children_.get(t)):null}getLastChildName(e){const t=this.resolveIndex_(e);if(t){const e=t.maxKey();return e&&e.name}return this.children_.maxKey()}getLastChild(e){const t=this.getLastChildName(e);return t?new ei(t,this.children_.get(t)):null}forEachChild(e,t){const n=this.resolveIndex_(e);return n?n.inorderTraversal((e=>t(e.name,e.node))):this.children_.inorderTraversal(t)}getIterator(e){return this.getIteratorFrom(e.minPost(),e)}getIteratorFrom(e,t){const n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,(e=>e));{const n=this.children_.getIteratorFrom(e.name,ei.Wrap);let i=n.peek();for(;null!=i&&t.compare(i,e)<0;)n.getNext(),i=n.peek();return n}}getReverseIterator(e){return this.getReverseIteratorFrom(e.maxPost(),e)}getReverseIteratorFrom(e,t){const n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,(e=>e));{const n=this.children_.getReverseIteratorFrom(e.name,ei.Wrap);let i=n.peek();for(;null!=i&&t.compare(i,e)>0;)n.getNext(),i=n.peek();return n}}compareTo(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===ki?-1:0}withIndex(e){if(e===ri||this.indexMap_.hasIndex(e))return this;{const t=this.indexMap_.addIndex(e,this.children_);return new xi(this.children_,this.priorityNode_,t)}}isIndexed(e){return e===ri||this.indexMap_.hasIndex(e)}equals(e){if(e===this)return!0;if(e.isLeafNode())return!1;{const t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){const e=this.getIterator(fi),n=t.getIterator(fi);let i=e.getNext(),r=n.getNext();for(;i&&r;){if(i.name!==r.name||!i.node.equals(r.node))return!1;i=e.getNext(),r=n.getNext()}return null===i&&null===r}return!1}return!1}}resolveIndex_(e){return e===ri?null:this.indexMap_.get(e.toString())}}xi.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/;const ki=new class extends xi{constructor(){super(new ai(ci),xi.EMPTY_NODE,vi.Default)}compareTo(e){return e===this?0:1}equals(e){return e===this}getPriority(){return this}getImmediateChild(e){return xi.EMPTY_NODE}isEmpty(){return!1}};Object.defineProperties(ei,{MIN:{value:new ei(Qt,xi.EMPTY_NODE)},MAX:{value:new ei(Xt,ki)}}),ii.__EMPTY_NODE=xi.EMPTY_NODE,mi.__childrenNodeConstructor=xi,hi=ki,_i=ki;const Ii=!0;function Bi(e,t=null){if(null===e)return xi.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),I(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new mi(e,Bi(t));if(e instanceof Array||!Ii){let n=xi.EMPTY_NODE;return rn(e,((t,i)=>{if(V(e,t)&&"."!==t.substring(0,1)){const e=Bi(i);!e.isLeafNode()&&e.isEmpty()||(n=n.updateImmediateChild(t,e))}})),n.updatePriority(Bi(t))}{const n=[];let i=!1;if(rn(e,((e,t)=>{if("."!==e.substring(0,1)){const r=Bi(t);r.isEmpty()||(i=i||!r.getPriority().isEmpty(),n.push(new ei(e,r)))}})),0===n.length)return xi.EMPTY_NODE;const r=yi(n,li,(e=>e.name),ci);if(i){const e=yi(n,fi.getCompare());return new xi(r,Bi(t),new vi({".priority":e},{".priority":fi}))}return new xi(r,Bi(t),vi.Default)}}!function(e){Ai=e}(Bi);class Ti extends ti{constructor(e){super(),this.indexPath_=e,I(!Hn(e)&&".priority"!==Ln(e),"Can't create PathIndex with empty path or .priority key")}extractChild(e){return e.getChild(this.indexPath_)}isDefinedOn(e){return!e.getChild(this.indexPath_).isEmpty()}compare(e,t){const n=this.extractChild(e.node),i=this.extractChild(t.node),r=n.compareTo(i);return 0===r?Zt(e.name,t.name):r}makePost(e,t){const n=Bi(e),i=xi.EMPTY_NODE.updateChild(this.indexPath_,n);return new ei(t,i)}maxPost(){const e=xi.EMPTY_NODE.updateChild(this.indexPath_,ki);return new ei(Xt,e)}toString(){return Un(this.indexPath_,0).join("/")}}const Si=new class extends ti{compare(e,t){const n=e.node.compareTo(t.node);return 0===n?Zt(e.name,t.name):n}isDefinedOn(e){return!0}indexedValueChanged(e,t){return!e.equals(t)}minPost(){return ei.MIN}maxPost(){return ei.MAX}makePost(e,t){const n=Bi(e);return new ei(t,n)}toString(){return".value"}};function Ni(e){return{type:"value",snapshotNode:e}}function Pi(e,t){return{type:"child_added",snapshotNode:t,childName:e}}function Di(e,t){return{type:"child_removed",snapshotNode:t,childName:e}}function Ri(e,t,n){return{type:"child_changed",snapshotNode:t,childName:e,oldSnap:n}}class Oi{constructor(e){this.index_=e}updateChild(e,t,n,i,r,s){I(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");const o=e.getImmediateChild(t);return o.getChild(i).equals(n.getChild(i))&&o.isEmpty()===n.isEmpty()?e:(null!=s&&(n.isEmpty()?e.hasChild(t)?s.trackChildChange(Di(t,o)):I(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):o.isEmpty()?s.trackChildChange(Pi(t,n)):s.trackChildChange(Ri(t,n,o))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))}updateFullNode(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(fi,((e,i)=>{t.hasChild(e)||n.trackChildChange(Di(e,i))})),t.isLeafNode()||t.forEachChild(fi,((t,i)=>{if(e.hasChild(t)){const r=e.getImmediateChild(t);r.equals(i)||n.trackChildChange(Ri(t,i,r))}else n.trackChildChange(Pi(t,i))}))),t.withIndex(this.index_)}updatePriority(e,t){return e.isEmpty()?xi.EMPTY_NODE:e.updatePriority(t)}filtersNodes(){return!1}getIndexedFilter(){return this}getIndex(){return this.index_}}class Mi{constructor(e){this.indexedFilter_=new Oi(e.getIndex()),this.index_=e.getIndex(),this.startPost_=Mi.getStartPost_(e),this.endPost_=Mi.getEndPost_(e),this.startIsInclusive_=!e.startAfterSet_,this.endIsInclusive_=!e.endBeforeSet_}getStartPost(){return this.startPost_}getEndPost(){return this.endPost_}matches(e){const t=this.startIsInclusive_?this.index_.compare(this.getStartPost(),e)<=0:this.index_.compare(this.getStartPost(),e)<0,n=this.endIsInclusive_?this.index_.compare(e,this.getEndPost())<=0:this.index_.compare(e,this.getEndPost())<0;return t&&n}updateChild(e,t,n,i,r,s){return this.matches(new ei(t,n))||(n=xi.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,i,r,s)}updateFullNode(e,t,n){t.isLeafNode()&&(t=xi.EMPTY_NODE);let i=t.withIndex(this.index_);i=i.updatePriority(xi.EMPTY_NODE);const r=this;return t.forEachChild(fi,((e,t)=>{r.matches(new ei(e,t))||(i=i.updateImmediateChild(e,xi.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(e,i,n)}updatePriority(e,t){return e}filtersNodes(){return!0}getIndexedFilter(){return this.indexedFilter_}getIndex(){return this.index_}static getStartPost_(e){if(e.hasStart()){const t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()}static getEndPost_(e){if(e.hasEnd()){const t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()}}class Li{constructor(e){this.withinDirectionalStart=e=>this.reverse_?this.withinEndPost(e):this.withinStartPost(e),this.withinDirectionalEnd=e=>this.reverse_?this.withinStartPost(e):this.withinEndPost(e),this.withinStartPost=e=>{const t=this.index_.compare(this.rangedFilter_.getStartPost(),e);return this.startIsInclusive_?t<=0:t<0},this.withinEndPost=e=>{const t=this.index_.compare(e,this.rangedFilter_.getEndPost());return this.endIsInclusive_?t<=0:t<0},this.rangedFilter_=new Mi(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft(),this.startIsInclusive_=!e.startAfterSet_,this.endIsInclusive_=!e.endBeforeSet_}updateChild(e,t,n,i,r,s){return this.rangedFilter_.matches(new ei(t,n))||(n=xi.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,i,r,s):this.fullLimitUpdateChild_(e,t,n,r,s)}updateFullNode(e,t,n){let i;if(t.isLeafNode()||t.isEmpty())i=xi.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){let e;i=xi.EMPTY_NODE.withIndex(this.index_),e=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);let n=0;for(;e.hasNext()&&n<this.limit_;){const t=e.getNext();if(this.withinDirectionalStart(t)){if(!this.withinDirectionalEnd(t))break;i=i.updateImmediateChild(t.name,t.node),n++}}}else{let e;i=t.withIndex(this.index_),i=i.updatePriority(xi.EMPTY_NODE),e=this.reverse_?i.getReverseIterator(this.index_):i.getIterator(this.index_);let n=0;for(;e.hasNext();){const t=e.getNext();n<this.limit_&&this.withinDirectionalStart(t)&&this.withinDirectionalEnd(t)?n++:i=i.updateImmediateChild(t.name,xi.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,i,n)}updatePriority(e,t){return e}filtersNodes(){return!0}getIndexedFilter(){return this.rangedFilter_.getIndexedFilter()}getIndex(){return this.index_}fullLimitUpdateChild_(e,t,n,i,r){let s;if(this.reverse_){const e=this.index_.getCompare();s=(t,n)=>e(n,t)}else s=this.index_.getCompare();const o=e;I(o.numChildren()===this.limit_,"");const a=new ei(t,n),l=this.reverse_?o.getFirstChild(this.index_):o.getLastChild(this.index_),c=this.rangedFilter_.matches(a);if(o.hasChild(t)){const e=o.getImmediateChild(t);let h=i.getChildAfterChild(this.index_,l,this.reverse_);for(;null!=h&&(h.name===t||o.hasChild(h.name));)h=i.getChildAfterChild(this.index_,h,this.reverse_);const d=null==h?1:s(h,a);if(c&&!n.isEmpty()&&d>=0)return null!=r&&r.trackChildChange(Ri(t,n,e)),o.updateImmediateChild(t,n);{null!=r&&r.trackChildChange(Di(t,e));const n=o.updateImmediateChild(t,xi.EMPTY_NODE);return null!=h&&this.rangedFilter_.matches(h)?(null!=r&&r.trackChildChange(Pi(h.name,h.node)),n.updateImmediateChild(h.name,h.node)):n}}return n.isEmpty()?e:c&&s(l,a)>=0?(null!=r&&(r.trackChildChange(Di(l.name,l.node)),r.trackChildChange(Pi(t,n))),o.updateImmediateChild(t,n).updateImmediateChild(l.name,xi.EMPTY_NODE)):e}}class qi{constructor(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.startAfterSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.endBeforeSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=fi}hasStart(){return this.startSet_}isViewFromLeft(){return""===this.viewFrom_?this.startSet_:"l"===this.viewFrom_}getIndexStartValue(){return I(this.startSet_,"Only valid if start has been set"),this.indexStartValue_}getIndexStartName(){return I(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:Qt}hasEnd(){return this.endSet_}getIndexEndValue(){return I(this.endSet_,"Only valid if end has been set"),this.indexEndValue_}getIndexEndName(){return I(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:Xt}hasLimit(){return this.limitSet_}hasAnchoredLimit(){return this.limitSet_&&""!==this.viewFrom_}getLimit(){return I(this.limitSet_,"Only valid if limit has been set"),this.limit_}getIndex(){return this.index_}loadsAllData(){return!(this.startSet_||this.endSet_||this.limitSet_)}isDefault(){return this.loadsAllData()&&this.index_===fi}copy(){const e=new qi;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.startAfterSet_=this.startAfterSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.endBeforeSet_=this.endBeforeSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e}}function Fi(e){const t={};if(e.isDefault())return t;let n;if(e.index_===fi?n="$priority":e.index_===Si?n="$value":e.index_===ri?n="$key":(I(e.index_ instanceof Ti,"Unrecognized index type!"),n=e.index_.toString()),t.orderBy=$(n),e.startSet_){const n=e.startAfterSet_?"startAfter":"startAt";t[n]=$(e.indexStartValue_),e.startNameSet_&&(t[n]+=","+$(e.indexStartName_))}if(e.endSet_){const n=e.endBeforeSet_?"endBefore":"endAt";t[n]=$(e.indexEndValue_),e.endNameSet_&&(t[n]+=","+$(e.indexEndName_))}return e.limitSet_&&(e.isViewFromLeft()?t.limitToFirst=e.limit_:t.limitToLast=e.limit_),t}function zi(e){const t={};if(e.startSet_&&(t.sp=e.indexStartValue_,e.startNameSet_&&(t.sn=e.indexStartName_),t.sin=!e.startAfterSet_),e.endSet_&&(t.ep=e.indexEndValue_,e.endNameSet_&&(t.en=e.indexEndName_),t.ein=!e.endBeforeSet_),e.limitSet_){t.l=e.limit_;let n=e.viewFrom_;""===n&&(n=e.isViewFromLeft()?"l":"r"),t.vf=n}return e.index_!==fi&&(t.i=e.index_.toString()),t}class Ui extends Pn{reportStats(e){throw new Error("Method not implemented.")}static getListenId_(e,t){return void 0!==t?"tag$"+t:(I(e._queryParams.isDefault(),"should have a tag if it's not a default query."),e._path.toString())}constructor(e,t,n,i){super(),this.repoInfo_=e,this.onDataUpdate_=t,this.authTokenProvider_=n,this.appCheckTokenProvider_=i,this.log_=$t("p:rest:"),this.listens_={}}listen(e,t,n,i){const r=e._path.toString();this.log_("Listen called for "+r+" "+e._queryIdentifier);const s=Ui.getListenId_(e,n),o={};this.listens_[s]=o;const a=Fi(e._queryParams);this.restRequest_(r+".json",a,((e,t)=>{let a=t;if(404===e&&(a=null,e=null),null===e&&this.onDataUpdate_(r,a,!1,n),G(this.listens_,s)===o){let t;t=e?401===e?"permission_denied":"rest_error:"+e:"ok",i(t,null)}}))}unlisten(e,t){const n=Ui.getListenId_(e,t);delete this.listens_[n]}get(e){const t=Fi(e._queryParams),n=e._path.toString(),i=new F;return this.restRequest_(n+".json",t,((e,t)=>{let r=t;404===e&&(r=null,e=null),null===e?(this.onDataUpdate_(n,r,!1,null),i.resolve(r)):i.reject(new Error(r))})),i.promise}refreshAuthToken(e){}restRequest_(e,t={},n){return t.format="export",Promise.all([this.authTokenProvider_.getToken(!1),this.appCheckTokenProvider_.getToken(!1)]).then((([i,r])=>{i&&i.accessToken&&(t.auth=i.accessToken),r&&r.token&&(t.ac=r.token);const s=(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host+e+"?ns="+this.repoInfo_.namespace+function(e){const t=[];for(const[n,i]of Object.entries(e))Array.isArray(i)?i.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(i));return t.length?"&"+t.join("&"):""}(t);this.log_("Sending REST request for "+s);const o=new XMLHttpRequest;o.onreadystatechange=()=>{if(n&&4===o.readyState){this.log_("REST Response for "+s+" received. status:",o.status,"response:",o.responseText);let e=null;if(o.status>=200&&o.status<300){try{e=H(o.responseText)}catch(e){Gt("Failed to parse JSON response for "+s+": "+o.responseText)}n(null,e)}else 401!==o.status&&404!==o.status&&Gt("Got unsuccessful REST response for "+s+" Status: "+o.status),n(o.status);n=null}},o.open("GET",s,!0),o.send()}))}}class Wi{constructor(){this.rootNode_=xi.EMPTY_NODE}getNode(e){return this.rootNode_.getChild(e)}updateSnapshot(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)}}function ji(){return{value:null,children:new Map}}function Hi(e,t,n){if(Hn(t))e.value=n,e.children.clear();else if(null!==e.value)e.value=e.value.updateChild(t,n);else{const i=Ln(t);e.children.has(i)||e.children.set(i,ji()),Hi(e.children.get(i),t=Fn(t),n)}}function $i(e,t,n){null!==e.value?n(t,e.value):function(e,t){e.children.forEach(((e,n)=>{t(n,e)}))}(e,((e,i)=>{$i(i,new On(t.toString()+"/"+e),n)}))}class Yi{constructor(e){this.collection_=e,this.last_=null}get(){const e=this.collection_.get(),t=Object.assign({},e);return this.last_&&rn(this.last_,((e,n)=>{t[e]=t[e]-n})),this.last_=e,t}}class Vi{constructor(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new Yi(e);const n=1e4+2e4*Math.random();cn(this.reportStats_.bind(this),Math.floor(n))}reportStats_(){const e=this.statsListener_.get(),t={};let n=!1;rn(e,((e,i)=>{i>0&&V(this.statsToReport_,e)&&(t[e]=i,n=!0)})),n&&this.server_.reportStats(t),cn(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))}}var Gi;function Ki(e){return{fromUser:!1,fromServer:!0,queryId:e,tagged:!0}}!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(Gi||(Gi={}));class Qi{constructor(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=Gi.ACK_USER_WRITE,this.source={fromUser:!0,fromServer:!1,queryId:null,tagged:!1}}operationForChild(e){if(Hn(this.path)){if(null!=this.affectedTree.value)return I(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;{const t=this.affectedTree.subtree(new On(e));return new Qi(Mn(),t,this.revert)}}return I(Ln(this.path)===e,"operationForChild called for unrelated child."),new Qi(Fn(this.path),this.affectedTree,this.revert)}}class Xi{constructor(e,t){this.source=e,this.path=t,this.type=Gi.LISTEN_COMPLETE}operationForChild(e){return Hn(this.path)?new Xi(this.source,Mn()):new Xi(this.source,Fn(this.path))}}class Zi{constructor(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=Gi.OVERWRITE}operationForChild(e){return Hn(this.path)?new Zi(this.source,Mn(),this.snap.getImmediateChild(e)):new Zi(this.source,Fn(this.path),this.snap)}}class Ji{constructor(e,t,n){this.source=e,this.path=t,this.children=n,this.type=Gi.MERGE}operationForChild(e){if(Hn(this.path)){const t=this.children.subtree(new On(e));return t.isEmpty()?null:t.value?new Zi(this.source,Mn(),t.value):new Ji(this.source,Mn(),t)}return I(Ln(this.path)===e,"Can't get a merge for a child not on the path of the operation"),new Ji(this.source,Fn(this.path),this.children)}toString(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"}}class er{constructor(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}isFullyInitialized(){return this.fullyInitialized_}isFiltered(){return this.filtered_}isCompleteForPath(e){if(Hn(e))return this.isFullyInitialized()&&!this.filtered_;const t=Ln(e);return this.isCompleteForChild(t)}isCompleteForChild(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)}getNode(){return this.node_}}class tr{constructor(e){this.query_=e,this.index_=this.query_._queryParams.getIndex()}}function nr(e,t,n,i,r,s){const o=i.filter((e=>e.type===n));o.sort(((t,n)=>function(e,t,n){if(null==t.childName||null==n.childName)throw B("Should only compare child_ events.");const i=new ei(t.childName,t.snapshotNode),r=new ei(n.childName,n.snapshotNode);return e.index_.compare(i,r)}(e,t,n))),o.forEach((n=>{const i=function(e,t,n){return"value"===t.type||"child_removed"===t.type||(t.prevName=n.getPredecessorChildName(t.childName,t.snapshotNode,e.index_)),t}(e,n,s);r.forEach((r=>{r.respondsTo(n.type)&&t.push(r.createEvent(i,e.query_))}))}))}function ir(e,t){return{eventCache:e,serverCache:t}}function rr(e,t,n,i){return ir(new er(t,n,i),e.serverCache)}function sr(e,t,n,i){return ir(e.eventCache,new er(t,n,i))}function or(e){return e.eventCache.isFullyInitialized()?e.eventCache.getNode():null}function ar(e){return e.serverCache.isFullyInitialized()?e.serverCache.getNode():null}let lr;class cr{static fromObject(e){let t=new cr(null);return rn(e,((e,n)=>{t=t.set(new On(e),n)})),t}constructor(e,t=(()=>(lr||(lr=new ai(Jt)),lr))()){this.value=e,this.children=t}isEmpty(){return null===this.value&&this.children.isEmpty()}findRootMostMatchingPathAndValue(e,t){if(null!=this.value&&t(this.value))return{path:Mn(),value:this.value};if(Hn(e))return null;{const n=Ln(e),i=this.children.get(n);if(null!==i){const r=i.findRootMostMatchingPathAndValue(Fn(e),t);return null!=r?{path:jn(new On(n),r.path),value:r.value}:null}return null}}findRootMostValueAndPath(e){return this.findRootMostMatchingPathAndValue(e,(()=>!0))}subtree(e){if(Hn(e))return this;{const t=Ln(e),n=this.children.get(t);return null!==n?n.subtree(Fn(e)):new cr(null)}}set(e,t){if(Hn(e))return new cr(t,this.children);{const n=Ln(e),i=(this.children.get(n)||new cr(null)).set(Fn(e),t),r=this.children.insert(n,i);return new cr(this.value,r)}}remove(e){if(Hn(e))return this.children.isEmpty()?new cr(null):new cr(null,this.children);{const t=Ln(e),n=this.children.get(t);if(n){const i=n.remove(Fn(e));let r;return r=i.isEmpty()?this.children.remove(t):this.children.insert(t,i),null===this.value&&r.isEmpty()?new cr(null):new cr(this.value,r)}return this}}get(e){if(Hn(e))return this.value;{const t=Ln(e),n=this.children.get(t);return n?n.get(Fn(e)):null}}setTree(e,t){if(Hn(e))return t;{const n=Ln(e),i=(this.children.get(n)||new cr(null)).setTree(Fn(e),t);let r;return r=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),new cr(this.value,r)}}fold(e){return this.fold_(Mn(),e)}fold_(e,t){const n={};return this.children.inorderTraversal(((i,r)=>{n[i]=r.fold_(jn(e,i),t)})),t(e,this.value,n)}findOnPath(e,t){return this.findOnPath_(e,Mn(),t)}findOnPath_(e,t,n){const i=!!this.value&&n(t,this.value);if(i)return i;if(Hn(e))return null;{const i=Ln(e),r=this.children.get(i);return r?r.findOnPath_(Fn(e),jn(t,i),n):null}}foreachOnPath(e,t){return this.foreachOnPath_(e,Mn(),t)}foreachOnPath_(e,t,n){if(Hn(e))return this;{this.value&&n(t,this.value);const i=Ln(e),r=this.children.get(i);return r?r.foreachOnPath_(Fn(e),jn(t,i),n):new cr(null)}}foreach(e){this.foreach_(Mn(),e)}foreach_(e,t){this.children.inorderTraversal(((n,i)=>{i.foreach_(jn(e,n),t)})),this.value&&t(e,this.value)}foreachChild(e){this.children.inorderTraversal(((t,n)=>{n.value&&e(t,n.value)}))}}class hr{constructor(e){this.writeTree_=e}static empty(){return new hr(new cr(null))}}function dr(e,t,n){if(Hn(t))return new hr(new cr(n));{const i=e.writeTree_.findRootMostValueAndPath(t);if(null!=i){const r=i.path;let s=i.value;const o=$n(r,t);return s=s.updateChild(o,n),new hr(e.writeTree_.set(r,s))}{const i=new cr(n),r=e.writeTree_.setTree(t,i);return new hr(r)}}}function ur(e,t,n){let i=e;return rn(n,((e,n)=>{i=dr(i,jn(t,e),n)})),i}function pr(e,t){if(Hn(t))return hr.empty();{const n=e.writeTree_.setTree(t,new cr(null));return new hr(n)}}function Ar(e,t){return null!=_r(e,t)}function _r(e,t){const n=e.writeTree_.findRootMostValueAndPath(t);return null!=n?e.writeTree_.get(n.path).getChild($n(n.path,t)):null}function mr(e){const t=[],n=e.writeTree_.value;return null!=n?n.isLeafNode()||n.forEachChild(fi,((e,n)=>{t.push(new ei(e,n))})):e.writeTree_.children.inorderTraversal(((e,n)=>{null!=n.value&&t.push(new ei(e,n.value))})),t}function fr(e,t){if(Hn(t))return e;{const n=_r(e,t);return new hr(null!=n?new cr(n):e.writeTree_.subtree(t))}}function gr(e){return e.writeTree_.isEmpty()}function Cr(e,t){return yr(Mn(),e.writeTree_,t)}function yr(e,t,n){if(null!=t.value)return n.updateChild(e,t.value);{let i=null;return t.children.inorderTraversal(((t,r)=>{".priority"===t?(I(null!==r.value,"Priority writes must always be leaf nodes"),i=r.value):n=yr(jn(e,t),r,n)})),n.getChild(e).isEmpty()||null===i||(n=n.updateChild(jn(e,".priority"),i)),n}}function br(e,t){return Pr(t,e)}function Er(e,t){if(e.snap)return Vn(e.path,t);for(const n in e.children)if(e.children.hasOwnProperty(n)&&Vn(jn(e.path,n),t))return!0;return!1}function vr(e){return e.visible}function wr(e,t,n){let i=hr.empty();for(let r=0;r<e.length;++r){const s=e[r];if(t(s)){const e=s.path;let t;if(s.snap)Vn(n,e)?(t=$n(n,e),i=dr(i,t,s.snap)):Vn(e,n)&&(t=$n(e,n),i=dr(i,Mn(),s.snap.getChild(t)));else{if(!s.children)throw B("WriteRecord should have .snap or .children");if(Vn(n,e))t=$n(n,e),i=ur(i,t,s.children);else if(Vn(e,n))if(t=$n(e,n),Hn(t))i=ur(i,Mn(),s.children);else{const e=G(s.children,Ln(t));if(e){const n=e.getChild(Fn(t));i=dr(i,Mn(),n)}}}}}return i}function xr(e,t,n,i,r){if(i||r){const s=fr(e.visibleWrites,t);if(!r&&gr(s))return n;if(r||null!=n||Ar(s,Mn())){const s=function(e){return(e.visible||r)&&(!i||!~i.indexOf(e.writeId))&&(Vn(e.path,t)||Vn(t,e.path))};return Cr(wr(e.allWrites,s,t),n||xi.EMPTY_NODE)}return null}{const i=_r(e.visibleWrites,t);if(null!=i)return i;{const i=fr(e.visibleWrites,t);return gr(i)?n:null!=n||Ar(i,Mn())?Cr(i,n||xi.EMPTY_NODE):null}}}function kr(e,t,n,i){return xr(e.writeTree,e.treePath,t,n,i)}function Ir(e,t){return function(e,t,n){let i=xi.EMPTY_NODE;const r=_r(e.visibleWrites,t);if(r)return r.isLeafNode()||r.forEachChild(fi,((e,t)=>{i=i.updateImmediateChild(e,t)})),i;if(n){const r=fr(e.visibleWrites,t);return n.forEachChild(fi,((e,t)=>{const n=Cr(fr(r,new On(e)),t);i=i.updateImmediateChild(e,n)})),mr(r).forEach((e=>{i=i.updateImmediateChild(e.name,e.node)})),i}return mr(fr(e.visibleWrites,t)).forEach((e=>{i=i.updateImmediateChild(e.name,e.node)})),i}(e.writeTree,e.treePath,t)}function Br(e,t,n,i){return function(e,t,n,i,r){I(i||r,"Either existingEventSnap or existingServerSnap must exist");const s=jn(t,n);if(Ar(e.visibleWrites,s))return null;{const t=fr(e.visibleWrites,s);return gr(t)?r.getChild(n):Cr(t,r.getChild(n))}}(e.writeTree,e.treePath,t,n,i)}function Tr(e,t){return function(e,t){return _r(e.visibleWrites,t)}(e.writeTree,jn(e.treePath,t))}function Sr(e,t,n){return function(e,t,n,i){const r=jn(t,n),s=_r(e.visibleWrites,r);return null!=s?s:i.isCompleteForChild(n)?Cr(fr(e.visibleWrites,r),i.getNode().getImmediateChild(n)):null}(e.writeTree,e.treePath,t,n)}function Nr(e,t){return Pr(jn(e.treePath,t),e.writeTree)}function Pr(e,t){return{treePath:e,writeTree:t}}class Dr{constructor(){this.changeMap=new Map}trackChildChange(e){const t=e.type,n=e.childName;I("child_added"===t||"child_changed"===t||"child_removed"===t,"Only child changes supported for tracking"),I(".priority"!==n,"Only non-priority child changes can be tracked.");const i=this.changeMap.get(n);if(i){const r=i.type;if("child_added"===t&&"child_removed"===r)this.changeMap.set(n,Ri(n,e.snapshotNode,i.snapshotNode));else if("child_removed"===t&&"child_added"===r)this.changeMap.delete(n);else if("child_removed"===t&&"child_changed"===r)this.changeMap.set(n,Di(n,i.oldSnap));else if("child_changed"===t&&"child_added"===r)this.changeMap.set(n,Pi(n,e.snapshotNode));else{if("child_changed"!==t||"child_changed"!==r)throw B("Illegal combination of changes: "+e+" occurred after "+i);this.changeMap.set(n,Ri(n,e.snapshotNode,i.oldSnap))}}else this.changeMap.set(n,e)}getChanges(){return Array.from(this.changeMap.values())}}const Rr=new class{getCompleteChild(e){return null}getChildAfterChild(e,t,n){return null}};class Or{constructor(e,t,n=null){this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}getCompleteChild(e){const t=this.viewCache_.eventCache;if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);{const t=null!=this.optCompleteServerCache_?new er(this.optCompleteServerCache_,!0,!1):this.viewCache_.serverCache;return Sr(this.writes_,e,t)}}getChildAfterChild(e,t,n){const i=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:ar(this.viewCache_),r=function(e,t,n,i,r,s){return function(e,t,n,i,r,s,o){let a;const l=fr(e.visibleWrites,t),c=_r(l,Mn());if(null!=c)a=c;else{if(null==n)return[];a=Cr(l,n)}if(a=a.withIndex(o),a.isEmpty()||a.isLeafNode())return[];{const e=[],t=o.getCompare(),n=s?a.getReverseIteratorFrom(i,o):a.getIteratorFrom(i,o);let l=n.getNext();for(;l&&e.length<r;)0!==t(l,i)&&e.push(l),l=n.getNext();return e}}(e.writeTree,e.treePath,t,n,i,r,s)}(this.writes_,i,t,1,n,e);return 0===r.length?null:r[0]}}function Mr(e,t,n,i,r,s){const o=t.eventCache;if(null!=Tr(i,n))return t;{let a,l;if(Hn(n))if(I(t.serverCache.isFullyInitialized(),"If change path is empty, we must have complete server data"),t.serverCache.isFiltered()){const n=ar(t),r=Ir(i,n instanceof xi?n:xi.EMPTY_NODE);a=e.filter.updateFullNode(t.eventCache.getNode(),r,s)}else{const n=kr(i,ar(t));a=e.filter.updateFullNode(t.eventCache.getNode(),n,s)}else{const c=Ln(n);if(".priority"===c){I(1===qn(n),"Can't have a priority with additional path components");const r=o.getNode();l=t.serverCache.getNode();const s=Br(i,n,r,l);a=null!=s?e.filter.updatePriority(r,s):o.getNode()}else{const h=Fn(n);let d;if(o.isCompleteForChild(c)){l=t.serverCache.getNode();const e=Br(i,n,o.getNode(),l);d=null!=e?o.getNode().getImmediateChild(c).updateChild(h,e):o.getNode().getImmediateChild(c)}else d=Sr(i,c,t.serverCache);a=null!=d?e.filter.updateChild(o.getNode(),c,d,h,r,s):o.getNode()}}return rr(t,a,o.isFullyInitialized()||Hn(n),e.filter.filtersNodes())}}function Lr(e,t,n,i,r,s,o,a){const l=t.serverCache;let c;const h=o?e.filter:e.filter.getIndexedFilter();if(Hn(n))c=h.updateFullNode(l.getNode(),i,null);else if(h.filtersNodes()&&!l.isFiltered()){const e=l.getNode().updateChild(n,i);c=h.updateFullNode(l.getNode(),e,null)}else{const e=Ln(n);if(!l.isCompleteForPath(n)&&qn(n)>1)return t;const r=Fn(n),s=l.getNode().getImmediateChild(e).updateChild(r,i);c=".priority"===e?h.updatePriority(l.getNode(),s):h.updateChild(l.getNode(),e,s,r,Rr,null)}const d=sr(t,c,l.isFullyInitialized()||Hn(n),h.filtersNodes());return Mr(e,d,n,r,new Or(r,d,s),a)}function qr(e,t,n,i,r,s,o){const a=t.eventCache;let l,c;const h=new Or(r,t,s);if(Hn(n))c=e.filter.updateFullNode(t.eventCache.getNode(),i,o),l=rr(t,c,!0,e.filter.filtersNodes());else{const r=Ln(n);if(".priority"===r)c=e.filter.updatePriority(t.eventCache.getNode(),i),l=rr(t,c,a.isFullyInitialized(),a.isFiltered());else{const s=Fn(n),c=a.getNode().getImmediateChild(r);let d;if(Hn(s))d=i;else{const e=h.getCompleteChild(r);d=null!=e?".priority"===zn(s)&&e.getChild(Wn(s)).isEmpty()?e:e.updateChild(s,i):xi.EMPTY_NODE}l=c.equals(d)?t:rr(t,e.filter.updateChild(a.getNode(),r,d,s,h,o),a.isFullyInitialized(),e.filter.filtersNodes())}}return l}function Fr(e,t){return e.eventCache.isCompleteForChild(t)}function zr(e,t,n){return n.foreach(((e,n)=>{t=t.updateChild(e,n)})),t}function Ur(e,t,n,i,r,s,o,a){if(t.serverCache.getNode().isEmpty()&&!t.serverCache.isFullyInitialized())return t;let l,c=t;l=Hn(n)?i:new cr(null).setTree(n,i);const h=t.serverCache.getNode();return l.children.inorderTraversal(((n,i)=>{if(h.hasChild(n)){const l=zr(0,t.serverCache.getNode().getImmediateChild(n),i);c=Lr(e,c,new On(n),l,r,s,o,a)}})),l.children.inorderTraversal(((n,i)=>{const l=!t.serverCache.isCompleteForChild(n)&&null===i.value;if(!h.hasChild(n)&&!l){const l=zr(0,t.serverCache.getNode().getImmediateChild(n),i);c=Lr(e,c,new On(n),l,r,s,o,a)}})),c}class Wr{constructor(e,t){this.query_=e,this.eventRegistrations_=[];const n=this.query_._queryParams,i=new Oi(n.getIndex()),r=(s=n).loadsAllData()?new Oi(s.getIndex()):s.hasLimit()?new Li(s):new Mi(s);var s;this.processor_=function(e){return{filter:e}}(r);const o=t.serverCache,a=t.eventCache,l=i.updateFullNode(xi.EMPTY_NODE,o.getNode(),null),c=r.updateFullNode(xi.EMPTY_NODE,a.getNode(),null),h=new er(l,o.isFullyInitialized(),i.filtersNodes()),d=new er(c,a.isFullyInitialized(),r.filtersNodes());this.viewCache_=ir(d,h),this.eventGenerator_=new tr(this.query_)}get query(){return this.query_}}function jr(e,t){const n=ar(e.viewCache_);return n&&(e.query._queryParams.loadsAllData()||!Hn(t)&&!n.getImmediateChild(Ln(t)).isEmpty())?n.getChild(t):null}function Hr(e){return 0===e.eventRegistrations_.length}function $r(e,t,n){const i=[];if(n){I(null==t,"A cancel should cancel all event registrations.");const r=e.query._path;e.eventRegistrations_.forEach((e=>{const t=e.createCancelEvent(n,r);t&&i.push(t)}))}if(t){let n=[];for(let i=0;i<e.eventRegistrations_.length;++i){const r=e.eventRegistrations_[i];if(r.matches(t)){if(t.hasAnyCallback()){n=n.concat(e.eventRegistrations_.slice(i+1));break}}else n.push(r)}e.eventRegistrations_=n}else e.eventRegistrations_=[];return i}function Yr(e,t,n,i){t.type===Gi.MERGE&&null!==t.source.queryId&&(I(ar(e.viewCache_),"We should always have a full cache before handling merges"),I(or(e.viewCache_),"Missing event cache, even though we have a server cache"));const r=e.viewCache_,s=function(e,t,n,i,r){const s=new Dr;let o,a;if(n.type===Gi.OVERWRITE){const l=n;l.source.fromUser?o=qr(e,t,l.path,l.snap,i,r,s):(I(l.source.fromServer,"Unknown source."),a=l.source.tagged||t.serverCache.isFiltered()&&!Hn(l.path),o=Lr(e,t,l.path,l.snap,i,r,a,s))}else if(n.type===Gi.MERGE){const l=n;l.source.fromUser?o=function(e,t,n,i,r,s,o){let a=t;return i.foreach(((i,l)=>{const c=jn(n,i);Fr(t,Ln(c))&&(a=qr(e,a,c,l,r,s,o))})),i.foreach(((i,l)=>{const c=jn(n,i);Fr(t,Ln(c))||(a=qr(e,a,c,l,r,s,o))})),a}(e,t,l.path,l.children,i,r,s):(I(l.source.fromServer,"Unknown source."),a=l.source.tagged||t.serverCache.isFiltered(),o=Ur(e,t,l.path,l.children,i,r,a,s))}else if(n.type===Gi.ACK_USER_WRITE){const a=n;o=a.revert?function(e,t,n,i,r,s){let o;if(null!=Tr(i,n))return t;{const a=new Or(i,t,r),l=t.eventCache.getNode();let c;if(Hn(n)||".priority"===Ln(n)){let n;if(t.serverCache.isFullyInitialized())n=kr(i,ar(t));else{const e=t.serverCache.getNode();I(e instanceof xi,"serverChildren would be complete if leaf node"),n=Ir(i,e)}c=e.filter.updateFullNode(l,n,s)}else{const r=Ln(n);let h=Sr(i,r,t.serverCache);null==h&&t.serverCache.isCompleteForChild(r)&&(h=l.getImmediateChild(r)),c=null!=h?e.filter.updateChild(l,r,h,Fn(n),a,s):t.eventCache.getNode().hasChild(r)?e.filter.updateChild(l,r,xi.EMPTY_NODE,Fn(n),a,s):l,c.isEmpty()&&t.serverCache.isFullyInitialized()&&(o=kr(i,ar(t)),o.isLeafNode()&&(c=e.filter.updateFullNode(c,o,s)))}return o=t.serverCache.isFullyInitialized()||null!=Tr(i,Mn()),rr(t,c,o,e.filter.filtersNodes())}}(e,t,a.path,i,r,s):function(e,t,n,i,r,s,o){if(null!=Tr(r,n))return t;const a=t.serverCache.isFiltered(),l=t.serverCache;if(null!=i.value){if(Hn(n)&&l.isFullyInitialized()||l.isCompleteForPath(n))return Lr(e,t,n,l.getNode().getChild(n),r,s,a,o);if(Hn(n)){let i=new cr(null);return l.getNode().forEachChild(ri,((e,t)=>{i=i.set(new On(e),t)})),Ur(e,t,n,i,r,s,a,o)}return t}{let c=new cr(null);return i.foreach(((e,t)=>{const i=jn(n,e);l.isCompleteForPath(i)&&(c=c.set(e,l.getNode().getChild(i)))})),Ur(e,t,n,c,r,s,a,o)}}(e,t,a.path,a.affectedTree,i,r,s)}else{if(n.type!==Gi.LISTEN_COMPLETE)throw B("Unknown operation type: "+n.type);o=function(e,t,n,i,r){const s=t.serverCache;return Mr(e,sr(t,s.getNode(),s.isFullyInitialized()||Hn(n),s.isFiltered()),n,i,Rr,r)}(e,t,n.path,i,s)}const l=s.getChanges();return function(e,t,n){const i=t.eventCache;if(i.isFullyInitialized()){const r=i.getNode().isLeafNode()||i.getNode().isEmpty(),s=or(e);(n.length>0||!e.eventCache.isFullyInitialized()||r&&!i.getNode().equals(s)||!i.getNode().getPriority().equals(s.getPriority()))&&n.push(Ni(or(t)))}}(t,o,l),{viewCache:o,changes:l}}(e.processor_,r,t,n,i);var o,a;return o=e.processor_,a=s.viewCache,I(a.eventCache.getNode().isIndexed(o.filter.getIndex()),"Event snap not indexed"),I(a.serverCache.getNode().isIndexed(o.filter.getIndex()),"Server snap not indexed"),I(s.viewCache.serverCache.isFullyInitialized()||!r.serverCache.isFullyInitialized(),"Once a server snap is complete, it should never go back"),e.viewCache_=s.viewCache,Vr(e,s.changes,s.viewCache.eventCache.getNode(),null)}function Vr(e,t,n,i){const r=i?[i]:e.eventRegistrations_;return function(e,t,n,i){const r=[],s=[];return t.forEach((t=>{var n;"child_changed"===t.type&&e.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&s.push((n=t.childName,{type:"child_moved",snapshotNode:t.snapshotNode,childName:n}))})),nr(e,r,"child_removed",t,i,n),nr(e,r,"child_added",t,i,n),nr(e,r,"child_moved",s,i,n),nr(e,r,"child_changed",t,i,n),nr(e,r,"value",t,i,n),r}(e.eventGenerator_,t,n,r)}let Gr,Kr;class Qr{constructor(){this.views=new Map}}function Xr(e,t,n,i){const r=t.source.queryId;if(null!==r){const s=e.views.get(r);return I(null!=s,"SyncTree gave us an op for an invalid query."),Yr(s,t,n,i)}{let r=[];for(const s of e.views.values())r=r.concat(Yr(s,t,n,i));return r}}function Zr(e,t,n,i,r){const s=t._queryIdentifier,o=e.views.get(s);if(!o){let e=kr(n,r?i:null),s=!1;e?s=!0:i instanceof xi?(e=Ir(n,i),s=!1):(e=xi.EMPTY_NODE,s=!1);const o=ir(new er(e,s,!1),new er(i,r,!1));return new Wr(t,o)}return o}function Jr(e){const t=[];for(const n of e.views.values())n.query._queryParams.loadsAllData()||t.push(n);return t}function es(e,t){let n=null;for(const i of e.views.values())n=n||jr(i,t);return n}function ts(e,t){if(t._queryParams.loadsAllData())return rs(e);{const n=t._queryIdentifier;return e.views.get(n)}}function ns(e,t){return null!=ts(e,t)}function is(e){return null!=rs(e)}function rs(e){for(const t of e.views.values())if(t.query._queryParams.loadsAllData())return t;return null}let ss=1;class os{constructor(e){this.listenProvider_=e,this.syncPointTree_=new cr(null),this.pendingWriteTree_={visibleWrites:hr.empty(),allWrites:[],lastWriteId:-1},this.tagToQueryMap=new Map,this.queryToTagMap=new Map}}function as(e,t,n,i,r){return function(e,t,n,i,r){I(i>e.lastWriteId,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),e.allWrites.push({path:t,snap:n,writeId:i,visible:r}),r&&(e.visibleWrites=dr(e.visibleWrites,t,n)),e.lastWriteId=i}(e.pendingWriteTree_,t,n,i,r),r?As(e,new Zi({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},t,n)):[]}function ls(e,t,n=!1){const i=function(e,t){for(let n=0;n<e.allWrites.length;n++){const i=e.allWrites[n];if(i.writeId===t)return i}return null}(e.pendingWriteTree_,t);if(function(e,t){const n=e.allWrites.findIndex((e=>e.writeId===t));I(n>=0,"removeWrite called with nonexistent writeId.");const i=e.allWrites[n];e.allWrites.splice(n,1);let r=i.visible,s=!1,o=e.allWrites.length-1;for(;r&&o>=0;){const t=e.allWrites[o];t.visible&&(o>=n&&Er(t,i.path)?r=!1:Vn(i.path,t.path)&&(s=!0)),o--}return!!r&&(s?(function(e){e.visibleWrites=wr(e.allWrites,vr,Mn()),e.allWrites.length>0?e.lastWriteId=e.allWrites[e.allWrites.length-1].writeId:e.lastWriteId=-1}(e),!0):(i.snap?e.visibleWrites=pr(e.visibleWrites,i.path):rn(i.children,(t=>{e.visibleWrites=pr(e.visibleWrites,jn(i.path,t))})),!0))}(e.pendingWriteTree_,t)){let t=new cr(null);return null!=i.snap?t=t.set(Mn(),!0):rn(i.children,(e=>{t=t.set(new On(e),!0)})),As(e,new Qi(i.path,t,n))}return[]}function cs(e,t,n){return As(e,new Zi({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,n))}function hs(e,t,n,i,r=!1){const s=t._path,o=e.syncPointTree_.get(s);let a=[];if(o&&("default"===t._queryIdentifier||ns(o,t))){const l=function(e,t,n,i){const r=t._queryIdentifier,s=[];let o=[];const a=is(e);if("default"===r)for(const[t,r]of e.views.entries())o=o.concat($r(r,n,i)),Hr(r)&&(e.views.delete(t),r.query._queryParams.loadsAllData()||s.push(r.query));else{const t=e.views.get(r);t&&(o=o.concat($r(t,n,i)),Hr(t)&&(e.views.delete(r),t.query._queryParams.loadsAllData()||s.push(t.query)))}return a&&!is(e)&&s.push(new(I(Gr,"Reference.ts has not been loaded"),Gr)(t._repo,t._path)),{removed:s,events:o}}(o,t,n,i);0===o.views.size&&(e.syncPointTree_=e.syncPointTree_.remove(s));const c=l.removed;if(a=l.events,!r){const n=-1!==c.findIndex((e=>e._queryParams.loadsAllData())),r=e.syncPointTree_.findOnPath(s,((e,t)=>is(t)));if(n&&!r){const t=e.syncPointTree_.subtree(s);if(!t.isEmpty()){const n=function(e){return e.fold(((e,t,n)=>{if(t&&is(t))return[rs(t)];{let e=[];return t&&(e=Jr(t)),rn(n,((t,n)=>{e=e.concat(n)})),e}}))}(t);for(let t=0;t<n.length;++t){const i=n[t],r=i.query,s=fs(e,i);e.listenProvider_.startListening(vs(r),gs(e,r),s.hashFn,s.onComplete)}}}if(!r&&c.length>0&&!i)if(n){const n=null;e.listenProvider_.stopListening(vs(t),n)}else c.forEach((t=>{const n=e.queryToTagMap.get(Cs(t));e.listenProvider_.stopListening(vs(t),n)}))}!function(e,t){for(let n=0;n<t.length;++n){const i=t[n];if(!i._queryParams.loadsAllData()){const t=Cs(i),n=e.queryToTagMap.get(t);e.queryToTagMap.delete(t),e.tagToQueryMap.delete(n)}}}(e,c)}return a}function ds(e,t,n,i){const r=ys(e,i);if(null!=r){const i=bs(r),s=i.path,o=i.queryId,a=$n(s,t);return Es(e,s,new Zi(Ki(o),a,n))}return[]}function us(e,t,n,i=!1){const r=t._path;let s=null,o=!1;e.syncPointTree_.foreachOnPath(r,((e,t)=>{const n=$n(e,r);s=s||es(t,n),o=o||is(t)}));let a,l=e.syncPointTree_.get(r);l?(o=o||is(l),s=s||es(l,Mn())):(l=new Qr,e.syncPointTree_=e.syncPointTree_.set(r,l)),null!=s?a=!0:(a=!1,s=xi.EMPTY_NODE,e.syncPointTree_.subtree(r).foreachChild(((e,t)=>{const n=es(t,Mn());n&&(s=s.updateImmediateChild(e,n))})));const c=ns(l,t);if(!c&&!t._queryParams.loadsAllData()){const n=Cs(t);I(!e.queryToTagMap.has(n),"View does not exist, but we have a tag");const i=ss++;e.queryToTagMap.set(n,i),e.tagToQueryMap.set(i,n)}let h=function(e,t,n,i,r,s){const o=Zr(e,t,i,r,s);return e.views.has(t._queryIdentifier)||e.views.set(t._queryIdentifier,o),function(e,t){e.eventRegistrations_.push(t)}(o,n),function(e,t){const n=e.viewCache_.eventCache,i=[];return n.getNode().isLeafNode()||n.getNode().forEachChild(fi,((e,t)=>{i.push(Pi(e,t))})),n.isFullyInitialized()&&i.push(Ni(n.getNode())),Vr(e,i,n.getNode(),t)}(o,n)}(l,t,n,br(e.pendingWriteTree_,r),s,a);if(!c&&!o&&!i){const n=ts(l,t);h=h.concat(function(e,t,n){const i=t._path,r=gs(e,t),s=fs(e,n),o=e.listenProvider_.startListening(vs(t),r,s.hashFn,s.onComplete),a=e.syncPointTree_.subtree(i);if(r)I(!is(a.value),"If we're adding a query, it shouldn't be shadowed");else{const t=a.fold(((e,t,n)=>{if(!Hn(e)&&t&&is(t))return[rs(t).query];{let e=[];return t&&(e=e.concat(Jr(t).map((e=>e.query)))),rn(n,((t,n)=>{e=e.concat(n)})),e}}));for(let n=0;n<t.length;++n){const i=t[n];e.listenProvider_.stopListening(vs(i),gs(e,i))}}return o}(e,t,n))}return h}function ps(e,t,n){const i=e.pendingWriteTree_,r=e.syncPointTree_.findOnPath(t,((e,n)=>{const i=es(n,$n(e,t));if(i)return i}));return xr(i,t,r,n,!0)}function As(e,t){return _s(t,e.syncPointTree_,null,br(e.pendingWriteTree_,Mn()))}function _s(e,t,n,i){if(Hn(e.path))return ms(e,t,n,i);{const r=t.get(Mn());null==n&&null!=r&&(n=es(r,Mn()));let s=[];const o=Ln(e.path),a=e.operationForChild(o),l=t.children.get(o);if(l&&a){const e=n?n.getImmediateChild(o):null,t=Nr(i,o);s=s.concat(_s(a,l,e,t))}return r&&(s=s.concat(Xr(r,e,i,n))),s}}function ms(e,t,n,i){const r=t.get(Mn());null==n&&null!=r&&(n=es(r,Mn()));let s=[];return t.children.inorderTraversal(((t,r)=>{const o=n?n.getImmediateChild(t):null,a=Nr(i,t),l=e.operationForChild(t);l&&(s=s.concat(ms(l,r,o,a)))})),r&&(s=s.concat(Xr(r,e,i,n))),s}function fs(e,t){const n=t.query,i=gs(e,n);return{hashFn:()=>{const e=function(e){return e.viewCache_.serverCache.getNode()}(t)||xi.EMPTY_NODE;return e.hash()},onComplete:t=>{if("ok"===t)return i?function(e,t,n){const i=ys(e,n);if(i){const n=bs(i),r=n.path,s=n.queryId,o=$n(r,t);return Es(e,r,new Xi(Ki(s),o))}return[]}(e,n._path,i):function(e,t){return As(e,new Xi({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t))}(e,n._path);{const i=function(e,t){let n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===e?n="Client doesn't have permission to access the desired data.":"unavailable"===e&&(n="The service is unavailable");const i=new Error(e+" at "+t._path.toString()+": "+n);return i.code=e.toUpperCase(),i}(t,n);return hs(e,n,null,i)}}}}function gs(e,t){const n=Cs(t);return e.queryToTagMap.get(n)}function Cs(e){return e._path.toString()+"$"+e._queryIdentifier}function ys(e,t){return e.tagToQueryMap.get(t)}function bs(e){const t=e.indexOf("$");return I(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new On(e.substr(0,t))}}function Es(e,t,n){const i=e.syncPointTree_.get(t);return I(i,"Missing sync point for query tag that we're tracking"),Xr(i,n,br(e.pendingWriteTree_,t),null)}function vs(e){return e._queryParams.loadsAllData()&&!e._queryParams.isDefault()?new(I(Kr,"Reference.ts has not been loaded"),Kr)(e._repo,e._path):e}class ws{constructor(e){this.node_=e}getImmediateChild(e){const t=this.node_.getImmediateChild(e);return new ws(t)}node(){return this.node_}}class xs{constructor(e,t){this.syncTree_=e,this.path_=t}getImmediateChild(e){const t=jn(this.path_,e);return new xs(this.syncTree_,t)}node(){return ps(this.syncTree_,this.path_)}}const ks=function(e){return(e=e||{}).timestamp=e.timestamp||(new Date).getTime(),e},Is=function(e,t,n){return e&&"object"==typeof e?(I(".sv"in e,"Unexpected leaf node or priority contents"),"string"==typeof e[".sv"]?Bs(e[".sv"],t,n):"object"==typeof e[".sv"]?Ts(e[".sv"],t):void I(!1,"Unexpected server value: "+JSON.stringify(e,null,2))):e},Bs=function(e,t,n){if("timestamp"===e)return n.timestamp;I(!1,"Unexpected server value: "+e)},Ts=function(e,t,n){e.hasOwnProperty("increment")||I(!1,"Unexpected server value: "+JSON.stringify(e,null,2));const i=e.increment;"number"!=typeof i&&I(!1,"Unexpected increment value: "+i);const r=t.node();if(I(null!=r,"Expected ChildrenNode.EMPTY_NODE for nulls"),!r.isLeafNode())return i;const s=r.getValue();return"number"!=typeof s?i:s+i},Ss=function(e,t,n,i){return Ps(t,new xs(n,e),i)},Ns=function(e,t,n){return Ps(e,new ws(t),n)};function Ps(e,t,n){const i=e.getPriority().val(),r=Is(i,t.getImmediateChild(".priority"),n);let s;if(e.isLeafNode()){const i=e,s=Is(i.getValue(),t,n);return s!==i.getValue()||r!==i.getPriority().val()?new mi(s,Bi(r)):e}{const i=e;return s=i,r!==i.getPriority().val()&&(s=s.updatePriority(new mi(r))),i.forEachChild(fi,((e,i)=>{const r=Ps(i,t.getImmediateChild(e),n);r!==i&&(s=s.updateImmediateChild(e,r))})),s}}class Ds{constructor(e="",t=null,n={children:{},childCount:0}){this.name=e,this.parent=t,this.node=n}}function Rs(e,t){let n=t instanceof On?t:new On(t),i=e,r=Ln(n);for(;null!==r;){const e=G(i.node.children,r)||{children:{},childCount:0};i=new Ds(r,i,e),n=Fn(n),r=Ln(n)}return i}function Os(e){return e.node.value}function Ms(e,t){e.node.value=t,Us(e)}function Ls(e){return e.node.childCount>0}function qs(e,t){rn(e.node.children,((n,i)=>{t(new Ds(n,e,i))}))}function Fs(e,t,n,i){n&&!i&&t(e),qs(e,(e=>{Fs(e,t,!0,i)})),n&&i&&t(e)}function zs(e){return new On(null===e.parent?e.name:zs(e.parent)+"/"+e.name)}function Us(e){null!==e.parent&&function(e,t,n){const i=function(e){return void 0===Os(e)&&!Ls(e)}(n),r=V(e.node.children,t);i&&r?(delete e.node.children[t],e.node.childCount--,Us(e)):i||r||(e.node.children[t]=n.node,e.node.childCount++,Us(e))}(e.parent,e.name,e)}const Ws=/[\[\].#$\/\u0000-\u001F\u007F]/,js=/[\[\].#$\u0000-\u001F\u007F]/,Hs=10485760,$s=function(e){return"string"==typeof e&&0!==e.length&&!Ws.test(e)},Ys=function(e){return"string"==typeof e&&0!==e.length&&!js.test(e)},Vs=function(e,t,n,i){i&&void 0===t||Gs(ee(e,"value"),t,n)},Gs=function(e,t,n){const i=n instanceof On?new Gn(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+Qn(i));if("function"==typeof t)throw new Error(e+"contains a function "+Qn(i)+" with contents = "+t.toString());if(Kt(t))throw new Error(e+"contains "+t.toString()+" "+Qn(i));if("string"==typeof t&&t.length>Hs/3&&te(t)>Hs)throw new Error(e+"contains a string greater than "+Hs+" utf8 bytes "+Qn(i)+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){let n=!1,r=!1;if(rn(t,((t,s)=>{if(".value"===t)n=!0;else if(".priority"!==t&&".sv"!==t&&(r=!0,!$s(t)))throw new Error(e+" contains an invalid key ("+t+") "+Qn(i)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');!function(e,t){e.parts_.length>0&&(e.byteLength_+=1),e.parts_.push(t),e.byteLength_+=te(t),Kn(e)}(i,t),Gs(e,s,i),function(e){const t=e.parts_.pop();e.byteLength_-=te(t),e.parts_.length>0&&(e.byteLength_-=1)}(i)})),n&&r)throw new Error(e+' contains ".value" child '+Qn(i)+" in addition to actual children.")}},Ks=function(e,t,n,i){if(!(i&&void 0===n||Ys(n)))throw new Error(ee(e,t)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},Qs=function(e,t,n,i){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),Ks(e,t,n,i)},Xs=function(e,t){if(".info"===Ln(t))throw new Error(e+" failed = Can't modify data under /.info/")};class Zs{constructor(){this.eventLists_=[],this.recursionDepth_=0}}function Js(e,t){let n=null;for(let i=0;i<t.length;i++){const r=t[i],s=r.getPath();null===n||Yn(s,n.path)||(e.eventLists_.push(n),n=null),null===n&&(n={events:[],path:s}),n.events.push(r)}n&&e.eventLists_.push(n)}function eo(e,t,n){Js(e,n),function(e,t){e.recursionDepth_++;let n=!0;for(let i=0;i<e.eventLists_.length;i++){const r=e.eventLists_[i];r&&(t(r.path)?(to(e.eventLists_[i]),e.eventLists_[i]=null):n=!1)}n&&(e.eventLists_=[]),e.recursionDepth_--}(e,(e=>Vn(e,t)||Vn(t,e)))}function to(e){for(let t=0;t<e.events.length;t++){const n=e.events[t];if(null!==n){e.events[t]=null;const i=n.getEventRunner();Wt&&Ht("event: "+n.toString()),ln(i)}}}const no=25;class io{constructor(e,t,n,i){this.repoInfo_=e,this.forceRestClient_=t,this.authTokenProvider_=n,this.appCheckProvider_=i,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Zs,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=ji(),this.transactionQueueTree_=new Ds,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}toString(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host}}function ro(e,t,n){if(e.stats_=vn(e.repoInfo_),e.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)e.server_=new Ui(e.repoInfo_,((t,n,i,r)=>{ao(e,t,n,i,r)}),e.authTokenProvider_,e.appCheckProvider_),setTimeout((()=>lo(e,!0)),0);else{if(null!=n){if("object"!=typeof n)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{$(n)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}e.persistentConnection_=new Jn(e.repoInfo_,t,((t,n,i,r)=>{ao(e,t,n,i,r)}),(t=>{lo(e,t)}),(t=>{!function(e,t){rn(t,((t,n)=>{co(e,t,n)}))}(e,t)}),e.authTokenProvider_,e.appCheckProvider_,n),e.server_=e.persistentConnection_}e.authTokenProvider_.addTokenChangeListener((t=>{e.server_.refreshAuthToken(t)})),e.appCheckProvider_.addTokenChangeListener((t=>{e.server_.refreshAppCheckToken(t.token)})),e.statsReporter_=function(t,n){const i=t.toString();return En[i]||(En[i]=new Vi(e.stats_,e.server_)),En[i]}(e.repoInfo_),e.infoData_=new Wi,e.infoSyncTree_=new os({startListening:(t,n,i,r)=>{let s=[];const o=e.infoData_.getNode(t._path);return o.isEmpty()||(s=cs(e.infoSyncTree_,t._path,o),setTimeout((()=>{r("ok")}),0)),s},stopListening:()=>{}}),co(e,"connected",!1),e.serverSyncTree_=new os({startListening:(t,n,i,r)=>(e.server_.listen(t,i,n,((n,i)=>{const s=r(n,i);eo(e.eventQueue_,t._path,s)})),[]),stopListening:(t,n)=>{e.server_.unlisten(t,n)}})}function so(e){const t=e.infoData_.getNode(new On(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t}function oo(e){return ks({timestamp:so(e)})}function ao(e,t,n,i,r){e.dataUpdateCount++;const s=new On(t);n=e.interceptServerDataCallback_?e.interceptServerDataCallback_(t,n):n;let o=[];if(r)if(i){const t=Q(n,(e=>Bi(e)));o=function(e,t,n,i){const r=ys(e,i);if(r){const i=bs(r),s=i.path,o=i.queryId,a=$n(s,t),l=cr.fromObject(n);return Es(e,s,new Ji(Ki(o),a,l))}return[]}(e.serverSyncTree_,s,t,r)}else{const t=Bi(n);o=ds(e.serverSyncTree_,s,t,r)}else if(i){const t=Q(n,(e=>Bi(e)));o=function(e,t,n){const i=cr.fromObject(n);return As(e,new Ji({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,i))}(e.serverSyncTree_,s,t)}else{const t=Bi(n);o=cs(e.serverSyncTree_,s,t)}let a=s;o.length>0&&(a=mo(e,s)),eo(e.eventQueue_,a,o)}function lo(e,t){co(e,"connected",t),!1===t&&function(e){po(e,"onDisconnectEvents");const t=oo(e),n=ji();$i(e.onDisconnect_,Mn(),((i,r)=>{const s=Ss(i,r,e.serverSyncTree_,t);Hi(n,i,s)}));let i=[];$i(n,Mn(),((t,n)=>{i=i.concat(cs(e.serverSyncTree_,t,n));const r=bo(e,t);mo(e,r)})),e.onDisconnect_=ji(),eo(e.eventQueue_,Mn(),i)}(e)}function co(e,t,n){const i=new On("/.info/"+t),r=Bi(n);e.infoData_.updateSnapshot(i,r);const s=cs(e.infoSyncTree_,i,r);eo(e.eventQueue_,i,s)}function ho(e){return e.nextWriteId_++}function uo(e,t,n,i,r){po(e,"set",{path:t.toString(),value:n,priority:i});const s=oo(e),o=Bi(n,i),a=ps(e.serverSyncTree_,t),l=Ns(o,a,s),c=ho(e),h=as(e.serverSyncTree_,t,l,c,!0);Js(e.eventQueue_,h),e.server_.put(t.toString(),o.val(!0),((n,i)=>{const s="ok"===n;s||Gt("set at "+t+" failed: "+n);const o=ls(e.serverSyncTree_,c,!s);eo(e.eventQueue_,t,o),function(e,t,n,i){t&&ln((()=>{if("ok"===n)t(null);else{const e=(n||"error").toUpperCase();let r=e;i&&(r+=": "+i);const s=new Error(r);s.code=e,t(s)}}))}(0,r,n,i)}));const d=bo(e,t);mo(e,d),eo(e.eventQueue_,d,[])}function po(e,...t){let n="";e.persistentConnection_&&(n=e.persistentConnection_.id+":"),Ht(n,...t)}function Ao(e,t,n){return ps(e.serverSyncTree_,t,n)||xi.EMPTY_NODE}function _o(e,t=e.transactionQueueTree_){if(t||yo(e,t),Os(t)){const n=go(e,t);I(n.length>0,"Sending zero length transaction queue"),n.every((e=>0===e.status))&&function(e,t,n){const i=n.map((e=>e.currentWriteId)),r=Ao(e,t,i);let s=r;const o=r.hash();for(let e=0;e<n.length;e++){const i=n[e];I(0===i.status,"tryToSendTransactionQueue_: items in queue should all be run."),i.status=1,i.retryCount++;const r=$n(t,i.path);s=s.updateChild(r,i.currentOutputSnapshotRaw)}const a=s.val(!0),l=t;e.server_.put(l.toString(),a,(i=>{po(e,"transaction put response",{path:l.toString(),status:i});let r=[];if("ok"===i){const i=[];for(let t=0;t<n.length;t++)n[t].status=2,r=r.concat(ls(e.serverSyncTree_,n[t].currentWriteId)),n[t].onComplete&&i.push((()=>n[t].onComplete(null,!0,n[t].currentOutputSnapshotResolved))),n[t].unwatcher();yo(e,Rs(e.transactionQueueTree_,t)),_o(e,e.transactionQueueTree_),eo(e.eventQueue_,t,r);for(let e=0;e<i.length;e++)ln(i[e])}else{if("datastale"===i)for(let e=0;e<n.length;e++)3===n[e].status?n[e].status=4:n[e].status=0;else{Gt("transaction at "+l.toString()+" failed: "+i);for(let e=0;e<n.length;e++)n[e].status=4,n[e].abortReason=i}mo(e,t)}}),o)}(e,zs(t),n)}else Ls(t)&&qs(t,(t=>{_o(e,t)}))}function mo(e,t){const n=fo(e,t),i=zs(n);return function(e,t,n){if(0===t.length)return;const i=[];let r=[];const s=t.filter((e=>0===e.status)).map((e=>e.currentWriteId));for(let a=0;a<t.length;a++){const l=t[a],c=$n(n,l.path);let h,d=!1;if(I(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),4===l.status)d=!0,h=l.abortReason,r=r.concat(ls(e.serverSyncTree_,l.currentWriteId,!0));else if(0===l.status)if(l.retryCount>=no)d=!0,h="maxretry",r=r.concat(ls(e.serverSyncTree_,l.currentWriteId,!0));else{const n=Ao(e,l.path,s);l.currentInputSnapshot=n;const i=t[a].update(n.val());if(void 0!==i){Gs("transaction failed: Data returned ",i,l.path);let t=Bi(i);"object"==typeof i&&null!=i&&V(i,".priority")||(t=t.updatePriority(n.getPriority()));const o=l.currentWriteId,a=oo(e),c=Ns(t,n,a);l.currentOutputSnapshotRaw=t,l.currentOutputSnapshotResolved=c,l.currentWriteId=ho(e),s.splice(s.indexOf(o),1),r=r.concat(as(e.serverSyncTree_,l.path,c,l.currentWriteId,l.applyLocally)),r=r.concat(ls(e.serverSyncTree_,o,!0))}else d=!0,h="nodata",r=r.concat(ls(e.serverSyncTree_,l.currentWriteId,!0))}eo(e.eventQueue_,n,r),r=[],d&&(t[a].status=2,o=t[a].unwatcher,setTimeout(o,Math.floor(0)),t[a].onComplete&&("nodata"===h?i.push((()=>t[a].onComplete(null,!1,t[a].currentInputSnapshot))):i.push((()=>t[a].onComplete(new Error(h),!1,null)))))}var o;yo(e,e.transactionQueueTree_);for(let e=0;e<i.length;e++)ln(i[e]);_o(e,e.transactionQueueTree_)}(e,go(e,n),i),i}function fo(e,t){let n,i=e.transactionQueueTree_;for(n=Ln(t);null!==n&&void 0===Os(i);)i=Rs(i,n),n=Ln(t=Fn(t));return i}function go(e,t){const n=[];return Co(e,t,n),n.sort(((e,t)=>e.order-t.order)),n}function Co(e,t,n){const i=Os(t);if(i)for(let e=0;e<i.length;e++)n.push(i[e]);qs(t,(t=>{Co(e,t,n)}))}function yo(e,t){const n=Os(t);if(n){let e=0;for(let t=0;t<n.length;t++)2!==n[t].status&&(n[e]=n[t],e++);n.length=e,Ms(t,n.length>0?n:void 0)}qs(t,(t=>{yo(e,t)}))}function bo(e,t){const n=zs(fo(e,t)),i=Rs(e.transactionQueueTree_,t);return function(e,t,n){let i=e.parent;for(;null!==i;){if(t(i))return!0;i=i.parent}}(i,(t=>{Eo(e,t)})),Eo(e,i),Fs(i,(t=>{Eo(e,t)})),n}function Eo(e,t){const n=Os(t);if(n){const i=[];let r=[],s=-1;for(let t=0;t<n.length;t++)3===n[t].status||(1===n[t].status?(I(s===t-1,"All SENT items should be at beginning of queue."),s=t,n[t].status=3,n[t].abortReason="set"):(I(0===n[t].status,"Unexpected transaction status in abort"),n[t].unwatcher(),r=r.concat(ls(e.serverSyncTree_,n[t].currentWriteId,!0)),n[t].onComplete&&i.push(n[t].onComplete.bind(null,new Error("set"),!1,null))));-1===s?Ms(t,void 0):n.length=s+1,eo(e.eventQueue_,zs(t),r);for(let e=0;e<i.length;e++)ln(i[e])}}const vo=function(e,t){const n=wo(e),i=n.namespace;"firebase.com"===n.domain&&Vt(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),i&&"undefined"!==i||"localhost"===n.domain||Vt("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&Gt("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");const r="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new gn(n.host,n.secure,i,r,t,"",i!==n.subdomain),path:new On(n.pathString)}},wo=function(e){let t="",n="",i="",r="",s="",o=!0,a="https",l=443;if("string"==typeof e){let c=e.indexOf("//");c>=0&&(a=e.substring(0,c-1),e=e.substring(c+2));let h=e.indexOf("/");-1===h&&(h=e.length);let d=e.indexOf("?");-1===d&&(d=e.length),t=e.substring(0,Math.min(h,d)),h<d&&(r=function(e){let t="";const n=e.split("/");for(let e=0;e<n.length;e++)if(n[e].length>0){let i=n[e];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(e){}t+="/"+i}return t}(e.substring(h,d)));const u=function(e){const t={};"?"===e.charAt(0)&&(e=e.substring(1));for(const n of e.split("&")){if(0===n.length)continue;const i=n.split("=");2===i.length?t[decodeURIComponent(i[0])]=decodeURIComponent(i[1]):Gt(`Invalid query segment '${n}' in query '${e}'`)}return t}(e.substring(Math.min(e.length,d)));c=t.indexOf(":"),c>=0?(o="https"===a||"wss"===a,l=parseInt(t.substring(c+1),10)):c=t.length;const p=t.slice(0,c);if("localhost"===p.toLowerCase())n="localhost";else if(p.split(".").length<=2)n=p;else{const e=t.indexOf(".");i=t.substring(0,e).toLowerCase(),n=t.substring(e+1),s=i}"ns"in u&&(s=u.ns)}return{host:t,port:l,domain:n,subdomain:i,secure:o,scheme:a,pathString:r,namespace:s}},xo="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",ko=function(){let e=0;const t=[];return function(n){const i=n===e;let r;e=n;const s=new Array(8);for(r=7;r>=0;r--)s[r]=xo.charAt(n%64),n=Math.floor(n/64);I(0===n,"Cannot push at time == 0");let o=s.join("");if(i){for(r=11;r>=0&&63===t[r];r--)t[r]=0;t[r]++}else for(r=0;r<12;r++)t[r]=Math.floor(64*Math.random());for(r=0;r<12;r++)o+=xo.charAt(t[r]);return I(20===o.length,"nextPushId: Length should be 20."),o}}();class Io{constructor(e,t,n,i){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=i}getPath(){const e=this.snapshot.ref;return"value"===this.eventType?e._path:e.parent._path}getEventType(){return this.eventType}getEventRunner(){return this.eventRegistration.getEventRunner(this)}toString(){return this.getPath().toString()+":"+this.eventType+":"+$(this.snapshot.exportVal())}}class Bo{constructor(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}getPath(){return this.path}getEventType(){return"cancel"}getEventRunner(){return this.eventRegistration.getEventRunner(this)}toString(){return this.path.toString()+":cancel"}}class To{constructor(e,t){this.snapshotCallback=e,this.cancelCallback=t}onValue(e,t){this.snapshotCallback.call(null,e,t)}onCancel(e){return I(this.hasCancelCallback,"Raising a cancel event on a listener with no cancel callback"),this.cancelCallback.call(null,e)}get hasCancelCallback(){return!!this.cancelCallback}matches(e){return this.snapshotCallback===e.snapshotCallback||void 0!==this.snapshotCallback.userCallback&&this.snapshotCallback.userCallback===e.snapshotCallback.userCallback&&this.snapshotCallback.context===e.snapshotCallback.context}}class So{constructor(e,t,n,i){this._repo=e,this._path=t,this._queryParams=n,this._orderByCalled=i}get key(){return Hn(this._path)?null:zn(this._path)}get ref(){return new No(this._repo,this._path)}get _queryIdentifier(){const e=zi(this._queryParams),t=tn(e);return"{}"===t?"default":t}get _queryObject(){return zi(this._queryParams)}isEqual(e){if(!((e=ne(e))instanceof So))return!1;const t=this._repo===e._repo,n=Yn(this._path,e._path),i=this._queryIdentifier===e._queryIdentifier;return t&&n&&i}toJSON(){return this.toString()}toString(){return this._repo.toString()+function(e){let t="";for(let n=e.pieceNum_;n<e.pieces_.length;n++)""!==e.pieces_[n]&&(t+="/"+encodeURIComponent(String(e.pieces_[n])));return t||"/"}(this._path)}}class No extends So{constructor(e,t){super(e,t,new qi,!1)}get parent(){const e=Wn(this._path);return null===e?null:new No(this._repo,e)}get root(){let e=this;for(;null!==e.parent;)e=e.parent;return e}}class Po{constructor(e,t,n){this._node=e,this.ref=t,this._index=n}get priority(){return this._node.getPriority().val()}get key(){return this.ref.key}get size(){return this._node.numChildren()}child(e){const t=new On(e),n=Ro(this.ref,e);return new Po(this._node.getChild(t),n,fi)}exists(){return!this._node.isEmpty()}exportVal(){return this._node.val(!0)}forEach(e){return!this._node.isLeafNode()&&!!this._node.forEachChild(this._index,((t,n)=>e(new Po(n,Ro(this.ref,t),fi))))}hasChild(e){const t=new On(e);return!this._node.getChild(t).isEmpty()}hasChildren(){return!this._node.isLeafNode()&&!this._node.isEmpty()}toJSON(){return this.exportVal()}val(){return this._node.val()}}function Do(e,t){return(e=ne(e))._checkNotDeleted("ref"),void 0!==t?Ro(e._root,t):e._root}function Ro(e,t){return null===Ln((e=ne(e))._path)?Qs("child","path",t,!1):Ks("child","path",t,!1),new No(e._repo,jn(e._path,t))}function Oo(e,t){e=ne(e),Xs("set",e._path),Vs("set",t,e._path,!1);const n=new F;return uo(e._repo,e._path,t,null,n.wrapCallback((()=>{}))),n.promise}function Mo(e){e=ne(e);const t=new To((()=>{})),n=new Lo(t);return function(e,t,n){const i=function(e,t){const n=t._path;let i=null;e.syncPointTree_.foreachOnPath(n,((e,t)=>{const r=$n(e,n);i=i||es(t,r)}));let r=e.syncPointTree_.get(n);r?i=i||es(r,Mn()):(r=new Qr,e.syncPointTree_=e.syncPointTree_.set(n,r));const s=null!=i,o=s?new er(i,!0,!1):null;return or(Zr(r,t,br(e.pendingWriteTree_,t._path),s?o.getNode():xi.EMPTY_NODE,s).viewCache_)}(e.serverSyncTree_,t);return null!=i?Promise.resolve(i):e.server_.get(t).then((i=>{const r=Bi(i).withIndex(t._queryParams.getIndex());let s;if(us(e.serverSyncTree_,t,n,!0),t._queryParams.loadsAllData())s=cs(e.serverSyncTree_,t._path,r);else{const n=gs(e.serverSyncTree_,t);s=ds(e.serverSyncTree_,t._path,r,n)}return eo(e.eventQueue_,t._path,s),hs(e.serverSyncTree_,t,n,null,!0),r}),(n=>(po(e,"get for query "+$(t)+" failed: "+n),Promise.reject(new Error(n)))))}(e._repo,e,n).then((t=>new Po(t,new No(e._repo,e._path),e._queryParams.getIndex())))}class Lo{constructor(e){this.callbackContext=e}respondsTo(e){return"value"===e}createEvent(e,t){const n=t._queryParams.getIndex();return new Io("value",this,new Po(e.snapshotNode,new No(t._repo,t._path),n))}getEventRunner(e){return"cancel"===e.getEventType()?()=>this.callbackContext.onCancel(e.error):()=>this.callbackContext.onValue(e.snapshot,null)}createCancelEvent(e,t){return this.callbackContext.hasCancelCallback?new Bo(this,e,t):null}matches(e){return e instanceof Lo&&(!e.callbackContext||!this.callbackContext||e.callbackContext.matches(this.callbackContext))}hasAnyCallback(){return null!==this.callbackContext}}!function(e){I(!Gr,"__referenceConstructor has already been defined"),Gr=e}(No),function(e){I(!Kr,"__referenceConstructor has already been defined"),Kr=e}(No);const qo={};function Fo(e,t,n,i,r){let s=i||e.options.databaseURL;void 0===s&&(e.options.projectId||Vt("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),Ht("Using default host for project ",e.options.projectId),s=`${e.options.projectId}-default-rtdb.firebaseio.com`);let o,a,l=vo(s,r),c=l.repoInfo;"undefined"!=typeof process&&process.env&&(a=process.env.FIREBASE_DATABASE_EMULATOR_HOST),a?(o=!0,s=`http://${a}?ns=${c.namespace}`,l=vo(s,r),c=l.repoInfo):o=!l.repoInfo.secure;const h=r&&o?new un(un.OWNER):new dn(e.name,e.options,t);(function(e,t){const n=t.path.toString();if("string"!=typeof t.repoInfo.host||0===t.repoInfo.host.length||!$s(t.repoInfo.namespace)&&"localhost"!==t.repoInfo.host.split(":")[0]||0!==n.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),Ys(e)}(n))throw new Error(ee(e,"url")+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')})("Invalid Firebase Database URL",l),Hn(l.path)||Vt("Database URL must point to the root of a Firebase Database (not including a child path).");const d=function(e,t,n,i){let r=qo[t.name];r||(r={},qo[t.name]=r);let s=r[e.toURLString()];return s&&Vt("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),s=new io(e,false,n,i),r[e.toURLString()]=s,s}(c,e,h,new hn(e.name,n));return new zo(d,e)}class zo{constructor(e,t){this._repoInternal=e,this.app=t,this.type="database",this._instanceStarted=!1}get _repo(){return this._instanceStarted||(ro(this._repoInternal,this.app.options.appId,this.app.options.databaseAuthVariableOverride),this._instanceStarted=!0),this._repoInternal}get _root(){return this._rootInternal||(this._rootInternal=new No(this._repo,Mn())),this._rootInternal}_delete(){return null!==this._rootInternal&&(function(e,t){const n=qo[t];n&&n[e.key]===e||Vt(`Database ${t}(${e.repoInfo_}) has already been deleted.`),function(e){e.persistentConnection_&&e.persistentConnection_.interrupt("repo_interrupt")}(e),delete n[e.key]}(this._repo,this.app.name),this._repoInternal=null,this._rootInternal=null),Promise.resolve()}_checkNotDeleted(e){null===this._rootInternal&&Vt("Cannot call "+e+" on a deleted database.")}}function Uo(e=function(e=at){const t=ct.get(e);if(!t&&e===at&&q())return mt();if(!t)throw At.create("no-app",{appName:e});return t}(),t){const n=function(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}(e,"database").getImmediate({identifier:t});if(!n._instanceStarted){const e=(e=>{const t=(e=>{var t,n;return null===(n=null===(t=L())||void 0===t?void 0:t.emulatorHosts)||void 0===n?void 0:n[e]})(e);if(!t)return;const n=t.lastIndexOf(":");if(n<=0||n+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const i=parseInt(t.substring(n+1),10);return"["===t[0]?[t.substring(1,n-1),i]:[t.substring(0,n),i]})("database");e&&function(e,t,n,i={}){(e=ne(e))._checkNotDeleted("useEmulator"),e._instanceStarted&&Vt("Cannot call useEmulator() after instance has already been initialized.");const r=e._repoInternal;let s;if(r.repoInfo_.nodeAdmin)i.mockUserToken&&Vt('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".'),s=new un(un.OWNER);else if(i.mockUserToken){const t="string"==typeof i.mockUserToken?i.mockUserToken:function(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=t||"demo-project",i=e.iat||0,r=e.sub||e.user_id;if(!r)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const s=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:i,exp:i+3600,auth_time:i,sub:r,user_id:r,firebase:{sign_in_provider:"custom",identities:{}}},e);return[D(JSON.stringify({alg:"none",type:"JWT"})),D(JSON.stringify(s)),""].join(".")}(i.mockUserToken,e.app.options.projectId);s=new un(t)}!function(e,t,n,i){e.repoInfo_=new gn(`${t}:${n}`,!1,e.repoInfo_.namespace,e.repoInfo_.webSocketOnly,e.repoInfo_.nodeAdmin,e.repoInfo_.persistenceKey,e.repoInfo_.includeNamespaceInQueryParams,!0),i&&(e.authTokenProvider_=i)}(r,t,n,s)}(n,...e)}return n}Jn.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},Jn.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)},Pt="11.0.2",pt(new ie("database",((e,{instanceIdentifier:t})=>Fo(e.getProvider("app").getImmediate(),e.getProvider("auth-internal"),e.getProvider("app-check-internal"),t)),"PUBLIC").setMultipleInstances(!0)),ft(St,Nt,void 0),ft(St,Nt,"esm2017");const Wo=[],jo=new class{async fetchData(){const e=Do(Uo(Tt),"/excursions");let t=[];try{const n=(await Mo(e)).val();for(const e in n){const i={id:e,...n[e]};t.push(i)}console.log("Data fetched successfully!")}catch(e){throw new Error(`FETCH - failed, status: ${e}`)}return t}async pushData(e){const t=Do(Uo(Tt),"/excursions");try{await function(e,t){e=ne(e),Xs("push",e._path),Vs("push",t,e._path,!0);const n=so(e._repo),i=ko(n),r=Ro(e,i),s=Ro(e,i);let o;return o=null!=t?Oo(s,t).then((()=>s)):Promise.resolve(s),r.then=o.then.bind(o),r.catch=o.then.bind(o,void 0),r}(t,e),console.log("Data pushed successfully!")}catch(e){throw new Error(`PUSH - failed, status: ${e}`)}}async removeData(e){const t=Do(Uo(Tt),`/excursions/${e}`);try{await function(e){return Xs("remove",e._path),Oo(e,null)}(t)}catch(e){throw new Error(`REMOVE - failed, status: ${e}`)}}async updateData(e,t){const n=Do(Uo(Tt),`/excursions/${e}`);try{await Oo(n,t)}catch(e){throw new Error(`UPDATE - failed, status: ${e}`)}}},Ho=new class{constructor(e){this.basket=e}basketValidation=e=>{const t=e.target.querySelector('input[name = "adults"]').value,n=e.target.querySelector('input[name = "children"]').value,i=this.validateSubmitTickets(e,t,n),r=this.validateBasketSize(e,t,n);return!(!i||r)};validateSubmitTickets(e,t,n){let i=!0;const r=/^([1-9]|[1-9][0-9]|100)$/,s=e.target.querySelector('div[name = "adults"]'),o=e.target.querySelector('div[name = "children"]');return""===t&&""===n&&(s.innerText="Fill up the blank space!",i=!1),t&&!r.test(t)&&(s.innerText="Invalid data!",i=!1),n&&!r.test(n)&&(o.innerText="Invalid data!",i=!1),!!i}validateBasketSize(e,t,n){let i=!1;const r=e.target.parentElement.getAttribute("id");return this.basket.forEach((e=>{if(e.id===r){const r=100;let s=0;const o=[];e.adultsTicketAmount&&o.push(parseInt(e.adultsTicketAmount)),e.childrenTicketAmount&&o.push(parseInt(e.childrenTicketAmount)),t&&o.push(parseInt(t)),n&&o.push(parseInt(n));for(let e=0;e<o.length;e++)s+=o[e];s>r&&(i=!0,alert("The Basket is full!"))}})),i}orderValidation=()=>{if(0===this.basket.length)return alert("There're no items in the basket!"),!1;let e=!0;const{name:t,email:n,orderErrorName:i,orderErrorEmail:r}=this.createPlaceOrderVariables();return this.isClientNameValid(t)?i.innerText="":(i.innerText="Incorrect name.",e=!1),this.isClientEmailValid(n)?r.innerText="":(r.innerText="Incorrect email.",e=!1),!!e};createPlaceOrderVariables=()=>{const e=document.querySelector(".basket__order"),t=e.querySelector('input[name = "name"]'),n=t.value,i=e.querySelector('input[name = "email"]'),r=i.value,s=e.querySelector(".order__field-error--name"),o=e.querySelector(".order__field-error--email");return{basketOrder:e,nameInput:t,name:n,emailInput:i,email:r,orderErrorName:s,orderErrorEmail:o}};isClientNameValid(e){return!!/^[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ\s]+$/.test(e)}isClientEmailValid(e){return!!/^\S+@\S+$/g.test(e)}}(Wo),$o=new class{manageNavbar(){window.addEventListener("DOMContentLoaded",(()=>{this.changeNavbarViews(),this.changeNavbarBackgroundColor(),this.onOffBasket(),this.showHideNavbar()}))}changeNavbarViews(){this.navbarMobileView(),window.addEventListener("resize",(()=>this.navbarMobileView()))}changeNavbarBackgroundColor(){const e=document.querySelector(".navbar"),t=document.querySelector(".basket-btn"),n=document.querySelector(".navbar__toggle");window.addEventListener("scroll",(()=>{window.scrollY>0?e.classList.add("navbar--background-scroll"):e.classList.remove("navbar--background-scroll")})),t.addEventListener("click",(()=>{e.classList.toggle("navbar--background-basket-btn")})),n.addEventListener("click",(()=>{e.classList.toggle("navbar--background-navbar-btn")}))}onOffBasket(){const e=document.querySelector(".basket-btn");e.addEventListener("click",(()=>{const t=document.querySelector(".basket"),n=document.querySelector("body");e.checked?(t.classList.add("basket--open"),n.style.overflow="hidden"):(t.classList.remove("basket--open"),n.style.overflow="initial")}))}showHideNavbar(){const e=document.querySelector(".navbar__toggle"),t=document.querySelector(".navbar__container--mobile"),n=document.querySelector(".navbar__btn");e.addEventListener("click",(()=>{t.classList.toggle("navbar__container--open"),n.classList.toggle("navbar__btn--checked")}))}navbarMobileView(){const e="navbar__container",t="navbar__item";window.innerWidth<1200?(this.changeClassOfElementList(`${t}`,`${t}--mobile`),this.changeClassOfElementList(`${e}`,`${e}--mobile`)):(this.changeClassOfElementList(`${t}--mobile`,`${t}`),this.changeClassOfElementList(`${e}--mobile`,`${e}`))}changeClassOfElementList(e,t){document.querySelectorAll(`.${e}`).forEach((n=>{n.classList.remove(`${e}`),n.classList.add(`${t}`)}))}};async function Yo(e){await async function(e){e.preventDefault();const{basketValidation:t}=Ho;if(!1===t(e))return;!function(){const e=document.querySelector(".panel__excursions");Array.from(e.querySelectorAll(".excursions__field-error")).forEach((e=>{e.innerText=""}))}();const{selectedExcursion:n}=await async function(e){const t=await jo.fetchData(),n=e.target.parentElement.id;return{selectedExcursion:t.find((e=>e.id===n))}}(e),{adultsTicketAmount:i,childrenTicketAmount:r}=function(e){let t=e.target.querySelector('input[name = "adults"]').value,n=e.target.querySelector('input[name = "children"]').value;return t?n?{adultsTicketAmount:t,childrenTicketAmount:n}:{adultsTicketAmount:t}:{childrenTicketAmount:n}}(e);!function(e){return Wo.some((t=>t.id===e.id))}(n)?function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"0",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"0";const i={id:e.id,name:e.name,adultsPrice:e.adultsPrice,adultsTicketAmount:t,childrenPrice:e.childrenPrice,childrenTicketAmount:n};Wo.push(i)}(n,i,r):function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"0",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"0";Wo.forEach((i=>{i.id===e.id&&(function(e,t){e.adultsTicketAmount=(parseInt(e.adultsTicketAmount)+parseInt(t)).toString()}(i,t),function(e,t){e.childrenTicketAmount=(parseInt(e.childrenTicketAmount)+parseInt(t)).toString()}(i,n))}))}(n,i,r)}(e),Vo(),function(){const e=document.querySelector(".items-list");(function(e){for(;e.children[1];)e.removeChild(e.children[1])})(e),Wo.forEach((t=>{const{itemListItemTemplate:n,name:i,pricesAdults:r,pricesChildren:s,itemTotalPrice:o}=function(){const e=document.querySelector(".item-list__item--prototype").cloneNode(!0);e.classList.remove("item-list__item--prototype");const t=e.querySelector(".item__name"),n=e.querySelector(".item__prices"),i=n.querySelector(".prices__adults"),r=n.querySelector(".prices__children"),s=e.querySelector(".item__total-price");return{itemListItemTemplate:e,name:t,pricesAdults:i,pricesChildren:r,itemTotalPrice:s}}();n.setAttribute("id",t.id),i.innerText=t.name,function(e,t,n){const{adultsTicketAmount:i,childrenTicketAmount:r}=Qo(e),{adultsTicketText:s,childrenTicketText:o}=function(e){const{adultsTicketAmount:t,childrenTicketAmount:n,adultsPrice:i,childrenPrice:r}=e;return{adultsTicketText:`adults:\n   ${t} x ${i} PLN`,childrenTicketText:`children:\n   ${n} x ${r} PLN`}}(e);i&&r?(t.innerText=s,n.innerText=o):i?(t.innerText=s,n.innerText=""):r&&(n.innerText=o,t.innerText="")}(t,r,s),function(e,t){const{adultsTicketAmount:n,childrenTicketAmount:i,adultsPrice:r,childrenPrice:s}=Qo(e);t.innerText=n*r+i*s+" PLN"}(t,o),e.appendChild(n)}))}(),document.querySelector(".panel__excursions").querySelectorAll("input:not([type = 'submit'])").forEach((e=>{e.value=""})),Ko(),document.querySelector(".items-list").querySelectorAll(".item__btn-remove").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),function(e){const t=e.target.parentElement,n=t.parentElement,i=Wo.findIndex((e=>t.id===e.id));Wo.splice(i,1),n.removeChild(t),Vo(),Ko()}(e)}))}))}function Vo(){const e=document.querySelector(".basket-btn__quantity");Wo.length>0?e.style.display="flex":e.style.display="none";const t=Wo.length;e.innerText=`${t}`}function Go(){let e=0;return Wo.forEach((t=>{const{adultsTicketAmount:n,childrenTicketAmount:i,adultsPrice:r,childrenPrice:s}=Qo(t);e+=n*r+i*s})),{totalPrice:e}}function Ko(){const{totalPrice:e}=Go();document.querySelector(".total-price__value").innerText=e+" PLN"}function Qo(e){let{adultsTicketAmount:t,childrenTicketAmount:n,adultsPrice:i,childrenPrice:r}=e;return t=parseInt(t),n=parseInt(n),i=parseInt(i),r=parseInt(r),{adultsTicketAmount:t,childrenTicketAmount:n,adultsPrice:i,childrenPrice:r}}async function Xo(e){e.preventDefault();const{orderValidation:t,createPlaceOrderVariables:n}=Ho;if(!1===t())return;const{name:i,email:r}=n(),{totalPrice:s}=Go(),{orderObj:o}=function(e,t,n){return{orderObj:{userName:t,userEmail:n,basket:e}}}(Wo,i,r);alert(`Thank you for placing an order worth ${s} PLN. The order details have been sent to the following email address: ${r}.\n    \n    This is a demo. No personal data was collected.\n    `),location.reload()}console.log("client"),document.addEventListener("DOMContentLoaded",(async function(){$o.manageNavbar(),function(e){const t=document.querySelector(".panel__excursions");e.forEach((e=>{const{excursionTemplate:n,name:i,description:r,adultsPrice:s,childrenPrice:o}=function(){const e=document.querySelector(".excursions__item--prototype").cloneNode(!0);e.classList.remove("excursions__item--prototype");const t=e.querySelector(".excursions__name"),n=e.querySelector(".excursions__description"),i=e.querySelectorAll(".excursions__price"),[r,s]=i;return{excursionTemplate:e,name:t,description:n,adultsPrice:r,childrenPrice:s}}();n.setAttribute("id",e.id),i.innerText=e.name,r.innerText=e.description,s.innerText=e.adultsPrice,o.innerText=e.childrenPrice,t.appendChild(n)}))}(await jo.fetchData()),document.querySelector(".excursions").addEventListener("submit",Yo),document.querySelector(".basket__order").addEventListener("submit",Xo)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,